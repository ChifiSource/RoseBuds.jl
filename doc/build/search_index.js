var documenterSearchIndex = {"docs":
[{"location":"core/#Core","page":"core","title":"Core","text":"","category":"section"},{"location":"core/","page":"core","title":"core","text":"","category":"page"},{"location":"core/#requests","page":"core","title":"requests","text":"","category":"section"},{"location":"core/","page":"core","title":"core","text":"Toolips has some bindings that pre-parse responses fro you, these are both post and get requests.","category":"page"},{"location":"core/","page":"core","title":"core","text":"get\npost","category":"page"},{"location":"core/#Base.get","page":"core","title":"Base.get","text":"Interface\n\nget() -> ::Dict\n\n\n\nQuick binding for an HTTP GET request.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"core/#Toolips.post","page":"core","title":"Toolips.post","text":"Interface\n\npost() ->\n\n\n\nQuick binding for an HTTP POST request.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"core/#connections","page":"core","title":"connections","text":"","category":"section"},{"location":"core/","page":"core","title":"core","text":"Connection","category":"page"},{"location":"core/#Toolips.Connection","page":"core","title":"Toolips.Connection","text":"Connection\n\nroutes::Dict\nhttp::HTTP.Stream\nextensions::Dict\n\nThe connection type is passed into route functions and pages as an argument. This is both for functions, as well as Servable.f() methods. This constructor     should not be called directly. Instead, it is called by the server and     passed through the function pipeline. Indexing a Connection will return         the extension named with that symbol.\n\nexample\n\n                  #  v The Connection\nhome = route(\"/\") do c::Connection\n    c[Logger].log(\"We can index extensions.\")\n    c.routes[\"/\"] = c::Connection -> write!(c, \"rerouting!\")\n    httpstream = c.http\n    write!(c, \"Hello world!\")\n    myheading::Component = h(\"myheading\", 1, text = \"Whoa!\")\n    write!(c, myheading)\nend\n\n\n\nField Info\n\nroutes::Dict - A dictionary of routes where the keys\n\nare the routed URL and the values are the functions to those keys.\n\nhttp::HTTP.Stream - The stream for this current peer's connection.\nextensions::Dict - A dictionary of extensions to load with the\n\nname to reference as keys and the extension as the pair.\n\nConstructors\n\nConnection\n\n\n\n\n\n","category":"type"},{"location":"core/","page":"core","title":"core","text":"Connections are served as an argument to incoming routes. Functions are written anticipating a connection return. Here we will write a new route using the route(::Function, ::String) method.","category":"page"},{"location":"core/","page":"core","title":"core","text":"using Toolips\nr = route(\"/\") do c::Connection\n    write!(c, \"Hello!\")\nend","category":"page"},{"location":"core/","page":"core","title":"core","text":"We also use the write!() method on our Connection. We can use this on the types ::Any, ::Vector{Servable}, and ::Servable.","category":"page"},{"location":"core/","page":"core","title":"core","text":"write!(::Connection, ::Any)\nwrite!(::Connection, ::String)\nwrite!(::Connection, ::Servable ...)\nwrite!(::Connection, ::Vector{Servable})\nwrite!(::Connection, ::Servable)","category":"page"},{"location":"core/#Toolips.write!-Tuple{Connection, Any}","page":"core","title":"Toolips.write!","text":"Interface\n\nwrite!(::Connection, ::Any) -> _\n\n\n\nAttempts to write any type to the Connection's stream.\n\nexample\n\n\n\n\n\n","category":"method"},{"location":"core/#Toolips.write!-Tuple{Connection, String}","page":"core","title":"Toolips.write!","text":"Interface\n\nwrite!(::Connection, ::String) -> _\n\n\n\nWrites the String into the Connection as HTML.\n\nexample\n\n\n\n\n\n","category":"method"},{"location":"core/#Toolips.write!-Tuple{Connection, Vararg{Servable}}","page":"core","title":"Toolips.write!","text":"\n\n\n\n","category":"method"},{"location":"core/#Toolips.write!-Tuple{Connection, Vector{Servable}}","page":"core","title":"Toolips.write!","text":"Interface\n\nwrite!(c::Connection, s::Vector{Servable}) -> _\n\n\n\nWrites, in order of element, each Servable inside of a Vector of Servables.\n\nexample\n\n\n\n\n\n","category":"method"},{"location":"core/#Toolips.write!-Tuple{Connection, Servable}","page":"core","title":"Toolips.write!","text":"Interface\n\nwrite!(::Connection, ::Servable) -> _\n\n\n\nWrites a Servable's return to a Connection's stream.\n\nexample\n\n\n\n\n\n","category":"method"},{"location":"core/","page":"core","title":"core","text":"Or push any data response into a body and startread the body.","category":"page"},{"location":"core/","page":"core","title":"core","text":"push!(::Connection, ::Any)\nstartread!(::Connection, ::Any)","category":"page"},{"location":"core/#Base.push!-Tuple{Connection, Any}","page":"core","title":"Base.push!","text":"\n\n\n\n","category":"method"},{"location":"core/","page":"core","title":"core","text":"The connection type can be indexed with Symbols, Strings, and Types. Symbols and Types will index the extensions. Strings will index the routes. The same goes for setting the indexes.","category":"page"},{"location":"core/","page":"core","title":"core","text":"getindex(::Connection, ::Symbol)\ngetindex(::Connection, ::Type)\ngetindex(::Connection, ::String)","category":"page"},{"location":"core/#Base.getindex-Tuple{Connection, Symbol}","page":"core","title":"Base.getindex","text":"\n\n\n\n","category":"method"},{"location":"core/#Base.getindex-Tuple{Connection, String}","page":"core","title":"Base.getindex","text":"\n\n\n\n","category":"method"},{"location":"core/","page":"core","title":"core","text":"We also use the Connection in order to get arguments, download files, and pretty much anything else pertaining to a person's connection.","category":"page"},{"location":"core/","page":"core","title":"core","text":"getarg\ngetargs\ngetip\npostarg\ngetpost\npostargs\ndownload!\nnavigate!","category":"page"},{"location":"core/#Toolips.getarg","page":"core","title":"Toolips.getarg","text":"Interface\n\ngetargs(::Connection, ::Symbol) -> ::Dict\n\n\n\nReturns the requested arguments from the target.\n\nexample\n\n\n\n\n\nInterface\n\ngetarg(::Connection, ::Symbol, ::Type) -> ::Vector\n\n\n\nThis method is the same as getargs(::HTTP.Stream, ::Symbol), however types are parsed as type T(). Note that \"Cannot convert...\" errors are possible with this method.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"core/#Toolips.getargs","page":"core","title":"Toolips.getargs","text":"Interface\n\ngetargs(::Connection) -> ::Dict\n\n\n\nThe getargs method returns arguments from the HTTP header (GET requests.) Returns a full dictionary of these values.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"core/#Toolips.getip","page":"core","title":"Toolips.getip","text":"\n\n\n\n","category":"function"},{"location":"core/#Toolips.postarg","page":"core","title":"Toolips.postarg","text":"Interface\n\npostarg(::Connection, ::String) -> ::Any\n\n\n\nGet a body argument of a POST response by name.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"core/#Toolips.postargs","page":"core","title":"Toolips.postargs","text":"Interface\n\npostargs(::Connection, ::Symbol, ::Type) -> ::Dict\n\n\n\nGet arguments from the request body.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"core/#Toolips.navigate!","page":"core","title":"Toolips.navigate!","text":"Interface\n\nnavigate!(::Connection, ::String) -> _\n\n\n\nRoutes a connected stream to a given URL.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"core/","page":"core","title":"core","text":"We can also check if an extension is present by type.","category":"page"},{"location":"core/","page":"core","title":"core","text":"has_extension(::Connection, ::Type)","category":"page"},{"location":"core/#routing","page":"core","title":"routing","text":"","category":"section"},{"location":"core/","page":"core","title":"core","text":"When routing, many methods involve the Connection type we just spoke of. In toolips, routes are handled by the Route type.","category":"page"},{"location":"core/","page":"core","title":"core","text":"Route","category":"page"},{"location":"core/#Toolips.Route","page":"core","title":"Toolips.Route","text":"Route{T}\n\npath::String\npage::T\n\nA route is added to a ServerTemplate using either its constructor, or the ServerTemplate.add(::Route) method. Each route calls either a particular servable or function; the type of which denoted by T. The Route type is     commonly constructed using the do syntax with the route(::Function, String)     method.\n\nexample\n\n# Constructors\nroute = Route(\"/\", p(text = \"hello\"))\n\nfunction example(c::Connection)\n    write!(c, \"hello\")\nend\n\nroute = Route(\"/\", example)\n\n# method\nroute = route(\"/\") do c\n    write!(c, \"Hello world!\")\n    write!(c, p(text = \"hello\"))\n    # we can also use extensions!\n    c[:logger].log(\"hello world!\")\nend\n\n\n\nfields\n\npath::String\n\nThe path, e.g. \"/\" at which to direct to the given component.\n\npage::T (::Function || T <: Component)\n\nThe servable to serve at this given route.\n\nconstructors\n\nRoute(path::String, f::Function) where\nRoute(path::String, s::Servable)\n\n\n\n\n\n","category":"type"},{"location":"core/","page":"core","title":"core","text":"The Route's constructors are not typically called directly, instead it is probably better to use these methods. Using route! as opposed to route! will modify the routes of a Connection or ToolipsServer","category":"page"},{"location":"core/","page":"core","title":"core","text":"route\nroute!\nunroute!","category":"page"},{"location":"core/#Toolips.route","page":"core","title":"Toolips.route","text":"Interface\n\nroute(::Function, ::String) -> ::Route\n\n\n\nCreates a route from the Function.\n\nexample\n\n\n\n\n\n\n\n\n\nInterface\n\nroute(::String, ::Servable) -> ::Route\n\n\n\nCreates a route from a Servable.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"core/#Toolips.route!","page":"core","title":"Toolips.route!","text":"Interface\n\nroute!(::Connection, ::Route) -> _\n\n\n\nModifies the routes on the Connection.\n\nexample\n\n\n\n\n\nInterface\n\nroute!(::Function, ::Connection, ::String) -> _\n\n\n\nRoutes a given String to the Function.\n\nexample\n\n\n\n\n\n\n\n\n\n\n\n\n\n","category":"function"},{"location":"core/#Toolips.unroute!","page":"core","title":"Toolips.unroute!","text":"Interface\n\nunroute!(::Connection, ::String) -> _\n\n\n\nRemoves the route with the key equivalent to the String.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"core/#servers","page":"core","title":"servers","text":"","category":"section"},{"location":"core/","page":"core","title":"core","text":"ToolipsServers are created by ServerTemplates. Here is a look at how to make a ServerTemplate:","category":"page"},{"location":"core/","page":"core","title":"core","text":"ServerTemplate","category":"page"},{"location":"core/#Toolips.ServerTemplate","page":"core","title":"Toolips.ServerTemplate","text":"ServerTemplate\n\nip::String\nport::Integer\nroutes::Vector{Route}\nextensions::Dict\nremove::Function\nadd::Function\nstart::Function\n\nThe ServerTemplate is used to configure a server before running. These are usually made and started inside of a main server file. –––––––––\n\nField Info\n\nip::String\nport::Integer\nroutes::Vector{Route}\nextensions::Dict\nremove::Function\nadd::Function\nstart::Function\n\n\n\nConstructors\n\nServerTemplate(ip::String, port::Int64, routes::Dict; extensions::Dict)\n\n\n\n\n\n","category":"type"},{"location":"core/","page":"core","title":"core","text":"The ServerTemplate.start() function returns a sub-type of ToolipsServer.","category":"page"},{"location":"core/","page":"core","title":"core","text":"ToolipsServer\nWebServer","category":"page"},{"location":"core/#Toolips.ToolipsServer","page":"core","title":"Toolips.ToolipsServer","text":"abstract type ToolipsServer\n\nToolipsServers are returned whenever the ServerTemplate.start() field is called. If you are running your server as a module, it should be noted that commonly a global start() method is used and returns this server, and dev is where this module is loaded, served, and revised.\n\nConsistencies\n\nroutes::Dict - The server's route => function dictionary.\nextensions::Dict - The server's currently loaded extensions.\nserver::Any - The server, whatever type it may be...\n\n\n\n\n\n","category":"type"},{"location":"core/#Toolips.WebServer","page":"core","title":"Toolips.WebServer","text":"\n\n\n\n","category":"type"},{"location":"core/","page":"core","title":"core","text":"We can also call some methods on a WebServer in order to change our routes","category":"page"},{"location":"core/#server-extensions","page":"core","title":"server extensions","text":"","category":"section"},{"location":"core/","page":"core","title":"core","text":"All server extensions have the following consistencies:","category":"page"},{"location":"core/","page":"core","title":"core","text":"ServerExtension","category":"page"},{"location":"core/#Toolips.ServerExtension","page":"core","title":"Toolips.ServerExtension","text":"abstract type ServerExtension\n\nServer extensions are loaded into the server on startup, and can have a few different abilities according to their type field's value. There are three types to be aware of.\n\n\n\nConsistencies\n\n\n\n\n\n","category":"type"},{"location":"core/","page":"core","title":"core","text":"There are also a few default extensions included with toolips. These can be used by passing them in a Symbol-labeled dictionary as the extensions key-word argument on a ServerTemplate These are Logger and Files.","category":"page"},{"location":"core/","page":"core","title":"core","text":"Logger\nFiles","category":"page"},{"location":"core/#Toolips.Logger","page":"core","title":"Toolips.Logger","text":"Logger\n\nout::String levels::Dict log::Function –––––––––\n\nField Info\n\nout::String\n\nRgw output file for the logger to write to.\n\nlog::Function\n\nA Logger logs information with different levels. Holds the function log(), connected to the function _log(). Methods:\n\nlog(::Int64, ::String)\nlog(::String)\nlog(::HTTP.Stream, ::String)\n\nWrites to HTML console, and also logs at level 1 with logger.\n\nlevels::Dict\n\n\n\nConstructors\n\nLogger(levels::Dict{level_count::Int64 => crayon::Crayons.Crayon};                     out::String = pwd() * \"logs/log.txt\") Logger(; out::String = pwd() * \"/logs/log.txt\")\n\n\n\n\n\n","category":"type"},{"location":"core/#Toolips.Files","page":"core","title":"Toolips.Files","text":"Files\n\ntype::Symbol directory::String f::Function –––––––––\n\ntype::Symbol - The type of extension. There are three different selections\n\nyou can choose from. :connection :routing :func. A :connection extension will be provided in Connection.extensions. A :routing function is passed a Dict of routes as an argument. The last is a function argument, which is just a specific function to run from the top-end to the server.\n\ndirectory::String - The directory to route the files from.\nf::Function - The function f() called with a Connection.\n\n\n\nconstructors\n\nFiles(dir::String)\n\n\n\n\n\n","category":"type"},{"location":"developer_api/#developer-api","page":"developer api","title":"developer api","text":"","category":"section"},{"location":"developer_api/#creating-servable-extensions","page":"developer api","title":"creating servable extensions","text":"","category":"section"},{"location":"developer_api/#creating-server-extensions","page":"developer api","title":"creating server extensions","text":"","category":"section"},{"location":"developer_api/#toolips-internals","page":"developer api","title":"toolips internals","text":"","category":"section"},{"location":"#toolips-docs","page":"toolips","title":"toolips docs","text":"","category":"section"},{"location":"#a-manic-web-development-framework","page":"toolips","title":"a manic web-development framework","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"Toolips.jl is a reactive. full-stack, modular and extendable web-development framework written in pure Julia.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"","category":"page"},{"location":"#curated-projects","page":"toolips","title":"curated projects","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"Below are some curated and deployed toolips apps and toolips extensions that can be used as examples or loaded as a server extension to look into.","category":"page"},{"location":"#sites","page":"toolips","title":"sites","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"EmsComputer.jl - ems computer\nToolipsApp.jl - toolips app","category":"page"},{"location":"#server-extensions","page":"toolips","title":"server extensions","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"ToolipsModifier.jl - Reactive Components.\nToolipsRemote.jl - Allows remote management of a Toolips server via a","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"regular HTTP request.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"ToolipsDefaults.jl - More style components, and style default methods.","category":"page"},{"location":"#servables","page":"toolips","title":"servables","text":"","category":"section"},{"location":"","page":"toolips","title":"toolips","text":"ToolipsDefaults.jl - More style components, and style default methods.\nToolipsCanvas.jl - Interact with the Canvas element via script.","category":"page"},{"location":"","page":"toolips","title":"toolips","text":"Toolips","category":"page"},{"location":"#Toolips","page":"toolips","title":"Toolips","text":"Created in June, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolips\n\nToolips.jl is a fast, asynchronous, low-memory, full-stack, and reactive web-development framework always written in pure Julia.\n\nModule Composition\n\nToolips\n\n\n\n\n\n","category":"module"},{"location":"servables/#servables","page":"servables","title":"servables","text":"","category":"section"},{"location":"servables/","page":"servables","title":"servables","text":"Servables are any non-core data-structure that is built with the objective of being written to a stream.","category":"page"},{"location":"servables/","page":"servables","title":"servables","text":"Servable","category":"page"},{"location":"servables/#Toolips.Servable","page":"servables","title":"Toolips.Servable","text":"abstract type Servable\n\nServables can be written to a Connection via thier f() function and the interface. They can also be indexed with strings or symbols to change properties\n\nConsistencies\n\nf::Function - Function whose output to be written to http().\nproperties::Dict - The properties of a given Servable. These are written\n\ninto the servable on the calling of f().\n\n\n\n\n\n","category":"type"},{"location":"servables/#components","page":"servables","title":"components","text":"","category":"section"},{"location":"servables/","page":"servables","title":"servables","text":"A component is a Servable which contains markup information and can easily be translated into elements with properties..","category":"page"},{"location":"servables/","page":"servables","title":"servables","text":"Component","category":"page"},{"location":"servables/#Toolips.Component","page":"servables","title":"Toolips.Component","text":"Component <: Servable\n\nname::String f::Function properties::Dict –––––––––\n\nname::String - The name field is the way that a component is denoted in code.\nf::Function - The function that gets called with the Connection as an\n\nargument.\n\nproperties::Dict - A dictionary of symbols and values.\n\n\n\nconstructors\n\nComponent(name::String, tag::String, properties::Dict)\n\n\n\n\n\n","category":"type"},{"location":"servables/","page":"servables","title":"servables","text":"There is a library of default components that comes with toolips. Generally, their name coincides with a docstring. All of these take an infinite number of key-word arguments. These arguments become the properties of a Servable.","category":"page"},{"location":"servables/","page":"servables","title":"servables","text":"img\nlink\nmeta\ninput\na\np\nh\nimg\nul\nli\ndivider\nbr\ni\ntitle\nspan\niframe\nsvg\nelement\nlabel\nscript\nnav\nbutton\nform","category":"page"},{"location":"servables/#style-components","page":"servables","title":"style components","text":"","category":"section"},{"location":"servables/","page":"servables","title":"servables","text":"Style components are change the style of a Component","category":"page"},{"location":"servables/","page":"servables","title":"servables","text":"","category":"page"},{"location":"servables/#files","page":"servables","title":"files","text":"","category":"section"},{"location":"projects/#creating-a-project","page":"projects","title":"creating a project","text":"","category":"section"},{"location":"projects/","page":"projects","title":"projects","text":"Toolips projects are created using the newapp and newwebapp methods respectively. newapp will create a simple project and newwebapp will create a full-stack web-app.","category":"page"},{"location":"projects/#micro","page":"projects","title":"micro","text":"","category":"section"},{"location":"projects/","page":"projects","title":"projects","text":"Toolips.new_app","category":"page"},{"location":"projects/#Toolips.new_app","page":"projects","title":"Toolips.new_app","text":"new_app(::String) -> _\n\n\n\nCreates a minimalistic app, usually used for creating endpoints – but can be used for anything. For an app with a real front-end, it might make sense to add some extensions.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"projects/#full-stack","page":"projects","title":"full-stack","text":"","category":"section"},{"location":"projects/","page":"projects","title":"projects","text":"Toolips.new_webapp","category":"page"},{"location":"projects/#Toolips.new_webapp","page":"projects","title":"Toolips.new_webapp","text":"new_webapp(::String) -> _\n\n\n\nCreates a fully-featured web-app. Adds CanonicalToolips.jl to provide more high-level interface origrannubg from Julia.\n\nexample\n\n\n\n\n\n","category":"function"}]
}
