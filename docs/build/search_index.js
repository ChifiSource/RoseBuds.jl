var documenterSearchIndex = {"docs":
[{"location":"connections/","page":"connections","title":"connections","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: #FDF8FF !important;}\nheader {background-color: #FDF8FF !important}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  border-radius: 30px !important;\n  border-color: lightblue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: #FFE5B4 !important;\n}\np {font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: #565656;}\n</style>","category":"page"},{"location":"connections/#connections","page":"connections","title":"connections","text":"","category":"section"},{"location":"connections/","page":"connections","title":"connections","text":"A Connection is passed as a single positional argument to every Route. The Connection contains the output stream that content is to be written to, a Dict{Symbol, ServerExtension} of Server Extensions, which can be accessed by indexing the Connection with a Symbol, and a Dict{String, Function} of routes that the server references. A different type of Connection can also be provided to a ServerTemplate in order to extend capabilities, but the new AbstractConnection must follow the consistencies of that type.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"AbstractConnection\nConnection","category":"page"},{"location":"connections/#Toolips.AbstractConnection","page":"connections","title":"Toolips.AbstractConnection","text":"abstract type AbstractConnection\n\nConnections are passed through function routes and can have Servables written     to it.\n\nConsistencies\n\nroutes::Dict - A {String, Function} dictionary that the server references to\n\ndirect incoming connections.\n\nhttp::Any - Usually an HTTP.Stream, however can be anything that is binded to\n\nthe Base.write method.\n\nextensions::Dict - A {Symbol, ServerExtension} dictionary that can be used to\n\naccess ServerExtensions.\n\n\n\n\n\n","category":"type"},{"location":"connections/#Toolips.Connection","page":"connections","title":"Toolips.Connection","text":"Connection <: AbstractConnection\n\nroutes::Dict\nhttp::HTTP.Stream\nextensions::Dict\n\nThe connection type is passed into route functions and pages as an argument. This is both for functions, as well as Servable.f() methods. This constructor     should not be called directly. Instead, it is called by the server and     passed through the function pipeline. Indexing a Connection will return         the extension named with that symbol.\n\nexample\n\n                  #  v The Connection\nhome = route(\"/\") do c::Connection\n    c[Logger].log(1, \"We can index extensions by type or symbol\")\n    c[:logger].log(1, \"see?\")\n    c.routes[\"/\"] = c::Connection -> write!(c, \"rerouting!\")\n    httpstream = c.http\n    write!(c, \"Hello world!\")\n    myheading::Component = h(\"myheading\", 1, text = \"Whoa!\")\n    write!(c, myheading)\nend\n\n\n\nfield info\n\nroutes::Dict - A dictionary of routes where the keys\n\nare the routed URL and the values are the functions to those keys.\n\nhttp::HTTP.Stream - The stream for this current peer's connection.\nextensions::Dict - A dictionary of extensions to load with the\n\nname to reference as keys and the extension as the pair.\n\nconstructors\n\nConnection(routes::Dict, http::HTTP.Stream, extensions::Dict)\n\n\n\n\n\n","category":"type"},{"location":"connections/#routes","page":"connections","title":"routes","text":"","category":"section"},{"location":"connections/","page":"connections","title":"connections","text":"Connection constructors, aside from the SpoofConnection, which is meant to be used solely for development of extensions, should not be called directly. Instead, Connections should be passed as an argument into routes.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"using Toolips\n\nthisroute = route(\"/\") do c::Connection\n\nend\nfunction thisroute(c::Connection)\n\nend","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"Connections also contain the routes that are provided to your ServerTemplate. We can obtain all routes by using the routes method.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"routes(::AbstractConnection)","category":"page"},{"location":"connections/#Toolips.routes-Tuple{AbstractConnection}","page":"connections","title":"Toolips.routes","text":"Interface\n\nroutes(c::Connection) -> ::Dict{String, Function}\n\n\n\nReturns the server's routes.\n\nexample\n\nroute(\"/\") do c::Connection\n    routes(c)\nend\n\n\n\n\n\n","category":"method"},{"location":"connections/","page":"connections","title":"connections","text":"The routes can also be set, or retrieved using setindex! and getindex! with a String respectively.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"using Toolips\n\nfunction example(c::Connection)\n  write!(c, \"hello world!\")\nend\nmyroute = route(\"/\") do c::Connection\n  c[\"/helloworld\"] = example\n  this_function = c[\"/\"]\nend","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"setindex!(::AbstractConnection, ::Function, ::String)\ngetindex(::AbstractConnection, ::String)","category":"page"},{"location":"connections/#Base.setindex!-Tuple{AbstractConnection, Function, String}","page":"connections","title":"Base.setindex!","text":"Interface\n\nsetindex!(c::AbstractConnection, f::Function, s::String) -> _\n\n\n\nSets the route path s to serve at the function f.\n\nexample\n\nc[\"/\"] = c -> write!(c, \"hello\")\n\n\n\n\n\n","category":"method"},{"location":"connections/#Base.getindex-Tuple{AbstractConnection, String}","page":"connections","title":"Base.getindex","text":"Interface\n\ngetindex(c::AbstractConnection, s::String) -> ::Function\n\n\n\nReturns the function that corresponds to the route dir s.\n\nexample\n\nc[\"/\"]\n\n    home\n\n\n\n\n\n","category":"method"},{"location":"connections/","page":"connections","title":"connections","text":"Another technique we could also use is the route! method.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"using Toolips\n\nfunction example(c::Connection)\n  write!(c, \"hello world!\")\nend\nmyroute = route(\"/\") do c::Connection\n  route!(c, \"/helloworld\") do c::Connection\n    write!(c, \"hello world!\")\n  end\nend","category":"page"},{"location":"connections/#extensions","page":"connections","title":"extensions","text":"","category":"section"},{"location":"connections/","page":"connections","title":"connections","text":"A Connection also carries some of the extensions loaded into a ServerTemplate. Note that this is not always the case, as some extensions are not loaded into the Connection to work. We can access the extensions with the extensions method.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"using Toolips\n\nmyroute = route(\"/\") do c::Connection\n  ourextensions = extensions(c)\nend","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"We can also check for a Connection extension by using the has_extension method.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"using Toolips\n\nmyroute = route(\"/\") do c::Connection\n  if has_extension(c, Logger)\n    c[:Logger].log(\"Hello world!\")\n  end\nend","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"Extensions can be accessed by indexing a Connection or WebServer with a Symbol. The ServerExtension's Symbol will be the type as a Symbol. We can also index with a Type directly.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"getindex(::AbstractConnection, ::Symbol)\ngetindex(::AbstractConnection, ::Type)","category":"page"},{"location":"connections/#Base.getindex-Tuple{AbstractConnection, Symbol}","page":"connections","title":"Base.getindex","text":"Interface\n\ngetindex(c::AbstractConnection, s::Symbol) -> ::ServerExtension\n\n\n\nIndexes the extensions in c.\n\nexample\n\nroute(\"/\") do c::Connection\n    c[:Logger].log(\"hi\")\nend\n\n\n\n\n\n","category":"method"},{"location":"connections/#Base.getindex-Tuple{AbstractConnection, Type}","page":"connections","title":"Base.getindex","text":"Interface\n\ngetindex(c::AbstractConnection, t::Type) -> ::ServerExtension\n\n\n\nIndexes the extensions in c by type.\n\nexample\n\nroute(\"/\") do c::Connection\n    c[Logger].log(\"hi\")\nend\n\n\n\n\n\n","category":"method"},{"location":"connections/#servables-basics","page":"connections","title":"servables basics","text":"","category":"section"},{"location":"connections/","page":"connections","title":"connections","text":"Servables are types that can be written to a Connection. This is done via the Servable.f(::Connection) method, which essentially becomes a Route inside of a Type. The main type of Servable that comes with the toolips base is the Component. There are several methods that can be used to construct a Component, and a full list of the Components that come with toolips are available here. For the following example, I will be using the p and divider Components. These are both equivalent to writing their tags in HTML, <p> and <div>. All Components take an infinite number of key-word arguments, which are element properties in HTML.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"myroute = route(\"/\") do c::Connection\n# name - vvvvv | vvvvvvvvvvvvvv - setting text\n  myp = p(\"myp\", text = \"Hello world!\")\n  mydiv = divider(\"mydiv\")\nend","category":"page"},{"location":"connections/#writing","page":"connections","title":"writing","text":"","category":"section"},{"location":"connections/","page":"connections","title":"connections","text":"All writing can be done via the write! method. We can write any type this way, as well as several different Vectors.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"write!","category":"page"},{"location":"connections/#Toolips.write!","page":"connections","title":"Toolips.write!","text":"Interface\n\nwrite!(c::AbstractConnection, s::Servable) -> _\n\n\n\nWrites a Servable's return to a Connection's stream. This is usually used in a routing function or a route where ::Connection is provided as an argument.\n\nexample\n\nserv = p(\"mycomp\", text = \"hello\")\n\nrt = route(\"/\") do c::Connection\n    write!(c, serv)\nend\n\n\n\n\n\nInterface\n\nwrite!(c::AbstractConnection, s::Vector{Servable}) -> _\n\n\n\nWrites all servables in s to c.\n\nexample\n\nc = Component()\nc2 = Component()\ncomps = components(c, c2)\n    Vector{Servable}(Component(), Component())\n\nwrite!(c, comps)\n\n\n\n\n\nInterface\n\nwrite!(c::AbstractConnection, s::Servable ...) -> _\n\n\n\nWrites Servables as Vector{Servable}\n\nexample\n\nwrite!(c, p(\"mycomp\", text = \"hello!\"), p(\"othercomp\", text = \"hi!\"))\n\n\n\n\n\nInterface\n\nwrite!(c::AbstractConnection, s::Vector{Component}) -> _\n\n\n\nA catch-all for when Vectors are accidentally stored as Vector{Any}.\n\nexample\n\nwrite!(c, [\"hello\", p(\"mycomp\", text = \"hello!\")])\n\n\n\n\n\nInterface\n\nwrite!(c::AbstractConnection, s::Vector{Component}) -> _\n\n\n\nA catch-all for when Vectors are accidentally stored as Vector{Component}.\n\nexample\n\nwrite!(c, [p(\"mycomp\", text = \"bye\")])\n\n\n\n\n\nInterface\n\nwrite!(c::AbstractConnection, s::String) -> _\n\n\n\nWrites the String into the Connection as HTML.\n\nexample\n\nwrite!(c, \"hello world!\")\n\n\n\n\n\nInterface\n\nwrite!(::AbstractConnection, ::Any) -> _\n\n\n\nAttempts to write any type to the Connection's stream.\n\nexample\n\nd = 50\nwrite!(c, d)\n\n\n\n\n\n","category":"function"},{"location":"connections/","page":"connections","title":"connections","text":"We will compose our Components from before using the push! method, and write them to our Connection using this method.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"myroute = route(\"/\") do c::Connection\n# name - vvvvv | vvvvvvvvvvvvvv - setting text\n  myp = p(\"myp\", text = \"Hello world!\")\n  mydiv = divider(\"mydiv\")\n  push!(mydiv, myp)\n  write!(c, mydiv)\nend","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"We can then load this into a ServerTemplate and use st.start() to reveal what has been created.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"using Toolips\n\nmyroute = route(\"/\") do c::Connection\n  myp = p(\"myp\", text = \"Hello world!\")\n  mydiv = divider(\"mydiv\")\n  push!(mydiv, myp)\n  write!(c, mydiv)\nend\n\nst = ServerTemplate()\nst.add(myroute)\nst.start()\n[2022:07:02:17:46]: 🌷 toolips> Toolips Server starting on port 8000\n[2022:07:02:17:46]: 🌷 toolips> Successfully started server on port 8000\n[2022:07:02:17:46]: 🌷 toolips> You may visit it now at http://127.0.0.1:8000","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"<img src = \"../assets/screenshot_connection1.png\"></img>","category":"page"},{"location":"connections/#arguments-and-posts","page":"connections","title":"arguments and posts","text":"","category":"section"},{"location":"connections/","page":"connections","title":"connections","text":"Connections also hold the arguments and post bodies for a given request. GET request arguments can be obtained via the getarg or getargs methods. getarg will index specifically for a particular Symbol, whereas getargs will return a Dict{Symbol, Any} with the values parsed as Any by ParseNotEval.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"getarg\ngetargs","category":"page"},{"location":"connections/#Toolips.getarg","page":"connections","title":"Toolips.getarg","text":"Interface\n\ngetarg(c::AbstractConnection, s::Symbol) -> ::Any\n\n\n\nReturns the requested argument from the target.\n\nexample\n\ngetarg(c, :x)\n    50\n\n\n\n\n\nInterface\n\ngetarg(c::AbstractConnection, s::Symbol, t::Type) -> ::Vector\n\n\n\nThis method is the same as getargs(::HTTP.Stream, ::Symbol), however types are parsed as type T(). Note that \"Cannot convert...\" errors are possible with this method.\n\nexample\n\ngetarg(c, :x, Int64)\n    50\n\n\n\n\n\n","category":"function"},{"location":"connections/#Toolips.getargs","page":"connections","title":"Toolips.getargs","text":"Interface\n\ngetargs(c::AbstractConnection) -> ::Dict{Symbol, Any}\n\n\n\nThe getargs method returns arguments from the HTTP target (GET requests.) Returns a Dict with the argument keys as Symbols.\n\nexample\n\nroute(\"/\") do c\n    args = getargs(c)\n    args[:message]\n        \"welcome to toolips ! :)\"\nend\n\n\n\n\n\n","category":"function"},{"location":"connections/","page":"connections","title":"connections","text":"We can also get the POST body as a String by calling the getpost method.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"getpost","category":"page"},{"location":"connections/#Toolips.getpost","page":"connections","title":"Toolips.getpost","text":"Interface\n\ngetpost(c::AbstractConnection) -> ::String\n\n\n\nReturns the POST body of c.\n\nexample\n\ngetpost(c)\n\"hello, this is a post request\"\n\n\n\n\n\n","category":"function"},{"location":"connections/","page":"connections","title":"connections","text":"We can restart the reading of a POST by using the startread! method.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"Toolips.startread!(::AbstractConnection)","category":"page"},{"location":"connections/#Toolips.startread!-Tuple{AbstractConnection}","page":"connections","title":"Toolips.startread!","text":"Interface\n\nstartread!(::AbstractConnection) -> _\n\n\n\nResets the seek on the Connection. This function is only meant to be used on post bodies.\n\nexample\n\npost = getpost(c)\n    \"hello\"\npost = getpost(c)\n    \"\"\nstartread!(c)\npost = getpost(c)\n    \"hello\"\n\n\n\n\n\n","category":"method"},{"location":"connections/#controlling-connections","page":"connections","title":"controlling connections","text":"","category":"section"},{"location":"connections/","page":"connections","title":"connections","text":"Controlling a Connection is relatively straightforward, we can navigate a Connection to a new URL using the navigate! method:","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"navigate!","category":"page"},{"location":"connections/#Toolips.navigate!","page":"connections","title":"Toolips.navigate!","text":"Interface\n\nnavigate!(::AbstractConnection, ::String) -> _\n\n\n\nRoutes a connected stream to a given URL.\n\nexample\n\nnavigate!(c, \"https://github.com/ChifiSource/Toolips.jl\")\n\n\n\n\n\n","category":"function"},{"location":"connections/","page":"connections","title":"connections","text":"We can download files using the download! method.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"Toolips.download!","category":"page"},{"location":"connections/#Toolips.download!","page":"connections","title":"Toolips.download!","text":"Interface\n\ndownload!(c::AbstractConnection, uri::String) -> _\n\n\n\nDownloads a file to a given Connection's computer.\n\nexample\n\ndownload!(c, \"files/mytext.txt\")\n\n\n\n\n\n","category":"function"},{"location":"connections/","page":"connections","title":"connections","text":"Finally, we can get an incoming Connection's IP-Address using the getip function.","category":"page"},{"location":"connections/","page":"connections","title":"connections","text":"getip","category":"page"},{"location":"connections/#Toolips.getip","page":"connections","title":"Toolips.getip","text":"Interface\n\ngetip(c::AbstractConnection) -> ::String\n\n\n\nReturns the IP that is connected via the connection c.\n\nexample\n\ngetip(c)\n\"127.0.0.2\"\n\n\n\n\n\n","category":"function"},{"location":"old/creating_servables/#creating-servables","page":"-","title":"creating servables","text":"","category":"section"},{"location":"old/creating_servables/","page":"-","title":"-","text":"Servables are probably the most approachable type to make for your first extension. Servable extensions work by simply making a sub-type of Servable. For example, the Component's source code:","category":"page"},{"location":"old/creating_servables/","page":"-","title":"-","text":"function Component(name::String = \"\", tag::String = \"\",\n     properties::Dict = Dict{Any, Any}())\n     push!(properties, :children => Vector{Servable}())\n     extras = Vector{Servable}()\n     f(c::AbstractConnection) = begin\n         open_tag::String = \"<$tag id = $name \"\n         text::String = \"\"\n         write!(c, open_tag)\n         for property in keys(properties)\n             special_keys = [:text, :children]\n             if ~(property in special_keys)\n                 prop::String = string(properties[property])\n                 propkey::String = string(property)\n                 write!(c, \" $propkey = $prop \")\n             else\n                 if property == :text\n                     text = properties[property]\n                 end\n             end\n         end\n         write!(c, \">\")\n         if length(properties[:children]) > 0\n             write!(c, properties[:children])\n        end\n        write!(c, \"$text</$tag>\")\n        write!(c, extras)\n     end\n     new(name, f, properties, extras, tag)::Component\nend","category":"page"},{"location":"old/creating_servables/","page":"-","title":"-","text":"The Interface portion of this module is actually built as a Toolips extension itself. Anyway, as you can see, the function f is provided. This is the one consistent field every servable must have. In that field you are able to write to the document with text how you normally would. That being said, Servable extensions can be used simply to generate one portion of your website while holding some information in a constructor. As soon as it is created, it is immediately dispatched to methods like write!, etc. Here is another, more simple example where we write a header.","category":"page"},{"location":"old/creating_servables/","page":"-","title":"-","text":"Toolips.Servable","category":"page"},{"location":"old/creating_servables/#Toolips.Servable","page":"-","title":"Toolips.Servable","text":"abstract type Servable\n\nServables can be written to a Connection via thier f() function and the interface. They can also be indexed with strings or symbols to change properties\n\nConsistencies\n\nf::Function - Function whose output to be written to http. Must take a single\n\npositonal argument of type ::Connection or ::AbstractConnection\n\n\n\n\n\n","category":"type"},{"location":"old/creating_servables/","page":"-","title":"-","text":"import Toolips: Servable\nmutable struct MyHeader <: Servable\n    f::Function\n    cs::Vector{Servable}\n    function MyHeader(name = \"Hello World\")\n        anim = Animation(\"fade_in\")\n        div_s = Style(\"div.myheaderstyle\", color = \"lightblue\")\n        header_div = divider(\"header_div\", align = \"center\")\n        heading = h(1, \"Hello, welcome!\", align = \"center\")\n        style!(heading, \"color\" => \"white\")\n        push!(header_div, heading)\n        animate!(div_s, anim)\n        cs = components(div_s, header_div)\n        f(c::Connection) = write!(c, cs)\n        new(f, cs)\n    end\nend","category":"page"},{"location":"old/creating_servables/","page":"-","title":"-","text":"Is this the best way to serve your websites? It could be depending on your application!","category":"page"},{"location":"extensions/toolips_defaults/","page":"toolips defaults","title":"toolips defaults","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-radius: 30px !important;\n  border-color: black !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: gray !important;\n}\np { color: #00147e !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<div align = \"center\">\n<img src = \"../../assets/toolipsdefaults.png\"></img>\n</div>","category":"page"},{"location":"extensions/toolips_defaults/","page":"toolips defaults","title":"toolips defaults","text":"Modules = [ToolipsDefaults]","category":"page"},{"location":"extensions/toolips_defaults/#ToolipsDefaults.containertextbox-Tuple{String, String}","page":"toolips defaults","title":"ToolipsDefaults.containertextbox","text":"Prrty Components\n\ntextbox(name::String, containername::String; text::String = \"text\") -> ::Component\n\n\n\nCreates a containertextbox component.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_defaults/#ToolipsDefaults.numberinput","page":"toolips defaults","title":"ToolipsDefaults.numberinput","text":"Prrty Components\n\nnumberinput(name::String, range::UnitRange = 1:10; value::Integer = 5) -> ::Component\n\n\n\nCreates a number input component.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_defaults/#ToolipsDefaults.rangeslider","page":"toolips defaults","title":"ToolipsDefaults.rangeslider","text":"Prrty Components\n\nrangeslider(name::String, range::UnitRange = 1:100; value::Integer = 50, step::Integer = 5) -> ::Component\n\n\n\nCreates a range slider component.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_defaults/#ToolipsDefaults.textbox","page":"toolips defaults","title":"ToolipsDefaults.textbox","text":"Prrty Components\n\ntextbox(name::String, range::UnitRange = 1:10; text::String = \"\", size::Integer = 10) -> ::Component\n\n\n\nCreates a textbox component.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/","page":"toolips session","title":"toolips session","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-radius: 30px !important;\n  border-color: red !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: pink !important;\n  border-style: dashed !important;\n}\np { color: #00147e !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<div align = \"center\">\n<img src = \"../../assets/toolipssession.png\"></img>\n</div>","category":"page"},{"location":"extensions/toolips_session/","page":"toolips session","title":"toolips session","text":"Modules = [ToolipsSession]","category":"page"},{"location":"extensions/toolips_session/#ToolipsSession.ToolipsSession","page":"toolips session","title":"ToolipsSession.ToolipsSession","text":"Created in June, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolipsSession\n\nExtension for:\n\nToolips This module provides the capability to make web-pages interactive by simply\n\nadding the Session extension to your ServerTemplate before starting. There are also methods contained for modifying Servables.\n\nModule Composition\n\nToolipsSession\n\n\n\n\n\n","category":"module"},{"location":"extensions/toolips_session/#ToolipsSession.ComponentModifier","page":"toolips session","title":"ToolipsSession.ComponentModifier","text":"ComponentModifier\n\nrootc::Dict\nf::Function\nchanges::Vector{String} The ComponentModifier stores a dictionary of components that can be indexed\n\nusing the Components themselves or their names. Methods push strings to the changes Dict. This is passed as an argument into the function provided to the on functions via the do syntax. Indexing will yield a given Component, setting the index to a pair will modify said component.\n\nexample\n\nroute(\"/\") do c::Connection\n    mydiv = divider(\"mydiv\", align = \"center\")\n    on(c, mydiv, \"click\") do cm::ComponentModifier\n        if cm[mydiv][\"align\"] == \"center\"\n            cm[mydiv] = \"align\" => \"left\"\n        else\n            cm[mydiv] = \"align\" => \"center\"\n        end\n    end\n    write!(c, mydiv)\nend\n\n\n\nconstructors\n\nComponentModifier(html::String)\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_session/#ToolipsSession.Session","page":"toolips session","title":"ToolipsSession.Session","text":"Session\n\ntype::Vector{Symbol}\nf::Function\nactive_routes::Vector{String}\nevents::Dict{String, Pair{String, Function}}\niptable::Dict{String, Dates.DateTime}\ntimeout::Integer Provides session capabilities and full-stack interactivity to a toolips server.\n\nNote that the route you want to be interactive must be in active_routes!\n\nexample\n\nexts = [Session()]\nst = ServerTemplate(extensions = exts)\nserver = st.start()\n\nroute!(server, \"/\") do c::Connection\n    myp = p(\"myp\", text = \"welcome to my site\")\n    on(c, myp, \"click\") do cm::ComponentModifier\n        if cm[myp][:text] == \"welcome to my site\"\n            set_text!(cm, myp, \"unwelcome to my site\")\n        else\n            set_text!(cm, myp, \"welcome to my site\")\n        end\n    end\n    write!(c, myp)\nend\n\n\n\nconstructors\n\nSession(activeroutes::Vector{String} = [\"/\"];         transitionduration::AbstractFloat = 0.5,         transition::String = \"ease-in-out\",         timeout::Integer = 30         )\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_session/#ToolipsSession.TimedTrigger","page":"toolips session","title":"ToolipsSession.TimedTrigger","text":"TimedTrigger\n\ntime::Integer\nf::Function Creates a timer which will post to the function f.\n\nexample\n\nroute(\"/\") do c::Connection\n    myp = p(\"hello\", text = \"wow\")\n    timer = TimedTrigger(5000) do cm::ComponentModifier\n        if cm[myp][:text] == \"wow\"\n            c[:Logger].log(\"wow.\")\n        end\n    end\n    write!(c, myp)\n    write!(c, timer)\nend\n\n\n\nconstructors\n\nTimedTrigger(func::Function, time::Integer)\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_session/#Base.append!-Tuple{ComponentModifier, Servable, Servable}","page":"toolips session","title":"Base.append!","text":"Session Interface\n\nappend!(cm::ComponentModifier, s::Servable, child::Servable) -> _\n\n\n\nAppends child to the servable s.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.append!-Tuple{ComponentModifier, String, Servable}","page":"toolips session","title":"Base.append!","text":"Session Interface\n\nappend!(cm::ComponentModifier, name::String, child::Servable) -> _\n\n\n\nAppends child to the servable s by name.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.getindex-Tuple{ComponentModifier, Component}","page":"toolips session","title":"Base.getindex","text":"Session Interface\n\ngetindex(cm::ComponentModifier, s::Component) -> ::Component\n\n\n\nGets the Component s from the ComponentModifier cm.\n\nexample\n\non(c, mydiv, \"click\") do cm::ComponentModifier\n    mydiv = cm[mydiv]\n    mydivalignment = mydiv[\"align\"]\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.getindex-Tuple{ComponentModifier, String}","page":"toolips session","title":"Base.getindex","text":"Session Interface\n\ngetindex(cm::ComponentModifier, s::String) -> ::Component\n\n\n\nGets the a Component by name from cm.\n\nexample\n\non(c, mydiv, \"click\") do cm::ComponentModifier\n    mydiv = cm[\"mydiv\"]\n    mydivalignment = mydiv[\"align\"]\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.getindex-Tuple{Session, AbstractString}","page":"toolips session","title":"Base.getindex","text":"Session Interface\n\ngetindex(m::Session, s::AbstractString) -> ::Vector{Pair}\n\n\n\nGets a session's refs by ip.\n\nexample\n\nroute(\"/\") do c::Connection\n    c[:Session][getip(c)]\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.setindex!-Tuple{ComponentModifier, Pair, Component}","page":"toolips session","title":"Base.setindex!","text":"Session Interface\n\nsetindex!(cm::ComponentModifier, p::Pair, s::Component) -> _\n\n\n\nSets the property from p[1] to p[2] on the served Component s.\n\nexample\n\non(c, mydiv, \"click\") do cm::ComponentModifier\n    if cm[mydiv][\"align\"] == \"center\"\n        cm[mydiv] = \"align\" => \"left\"\n    else\n        cm[mydiv] = \"align\" => \"center\"\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Base.setindex!-Tuple{ComponentModifier, Pair, String}","page":"toolips session","title":"Base.setindex!","text":"Session Interface\n\nsetindex!(cm::ComponentModifier, p::Pair, s::String) -> _\n\n\n\nSets the property from p[1] to p[2] on the served with name s.\n\nexample\n\non(c, mydiv, \"click\") do cm::ComponentModifier\n    if cm[\"mydiv\"][\"align\"] == \"center\"\n        cm[\"mydiv\"] = \"align\" => \"left\"\n    else\n        cm[\"mydiv\"] = \"align\" => \"center\"\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.animate!-Tuple{ComponentModifier, Servable, Animation}","page":"toolips session","title":"Toolips.animate!","text":"Session Interface\n\nanimate!(cm::ComponentModifier, s::Servable, a::Animation; play::Bool) -> _\n\n\n\nUpdates the servable s's animation with the animation a.\n\nexample\n\ns = divider(\"mydiv\")\na = Animation(\"fade\")\na[:from] = \"opacity\" => \"0%\"\na[:to] = \"opacity\" => \"100%\"\n# where c is the Connection.\non(c, s, \"click\") do cm::ComponentModifier\n    animate!(cm, s, a)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.animate!-Tuple{ComponentModifier, String, Animation}","page":"toolips session","title":"Toolips.animate!","text":"Session Interface\n\nanimate!(cm::ComponentModifier, s::String, a::Animation; play::Bool) -> _\n\n\n\nUpdates the servable with name s's animation with the animation a.\n\nexample\n\n``` s = divider(\"mydiv\") a = Animation(\"fade\") a[:from] = \"opacity\" => \"0%\" a[:to] = \"opacity\" => \"100%\"\n\nwhere c is the Connection.\n\non(c, s, \"click\") do cm::ComponentModifier     animate!(cm, s, a) end      ```\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.kill!-Tuple{Connection}","page":"toolips session","title":"Toolips.kill!","text":"Session Interface\n\nkill!(c::Connection)\n\n\n\nKills a Connection's saved events.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ComponentModifier, Servable, Pair}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::ComponentModifier, s::Servable, p::Pair) -> _\n\n\n\nStyles the Servable s with the properties and values in p.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ComponentModifier, Servable, Style}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::ComponentModifier, s::Servable, style::Style) -> _\n\n\n\nChanges the style class of s to the style p. Note – styles must be already written to the Connection prior.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ComponentModifier, Servable, Vararg{Pair{String, String}}}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::ComponentModifier, s::Servable, p::Pair{String, String}) -> _\n\n\n\nStyles the Servable s with the properties and values in p.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ComponentModifier, Servable, Vector{Pair{String, String}}}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::ComponentModifier, name::String, p::Vector{Pair{String, String}}) -> _\n\n\n\nStyles a Servable by name with the properties and values in p.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ComponentModifier, String, Pair}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::ComponentModifier, name::String, p::Pair) -> _\n\n\n\nStyles a Servable by name with the properties and values in p.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#Toolips.style!-Tuple{ComponentModifier, String, String}","page":"toolips session","title":"Toolips.style!","text":"Session Interface\n\nstyle!(cm::ComponentModifier, name::String, sname::String) -> _\n\n\n\nChanges the style class of a Servable by name to the style p by name. Note – styles must be already written to the Connection prior.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.alert!-Tuple{ComponentModifier, AbstractString}","page":"toolips session","title":"ToolipsSession.alert!","text":"Session Interface\n\nalert!(cm::ComponentModifier, s::String) -> _\n\n\n\nSends an alert to the current session.\n\nexample\n\non(c, s, \"click\") do cm::ComponentModifier\n    alert!(cm, \"oh no!\")\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.confirm_redirects!-Tuple{ComponentModifier}","page":"toolips session","title":"ToolipsSession.confirm_redirects!","text":"Session Interface\n\nfree_redirects!(cm::ComponentModifier) -> _\n\n\n\nAdds an \"are you sure you want to leave this page... unsaved changes\" pop-up  when trying to leave the page. Can be undone with free_redirects!\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.createcomp-Tuple{Any}","page":"toolips session","title":"ToolipsSession.createcomp","text":"Session Internals\n\ncreatecomp(element::Any) -> ::Component\n\n\n\nConverts HTML node into a component, used by htmlcomponent(::String).\n\nexample\n\nrn = firstnode(ro)\nchildren::Dict = Dict()\nfor n in eachelement(rn)\n    comp::Component = createcomp(n)\n    push!(children, comp.name => comp)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.document_linker-Tuple{Connection}","page":"toolips session","title":"ToolipsSession.document_linker","text":"Session Internals\n\ndocument_linker(c::Connection) -> _\n\n\n\nServed to /modifier/linker by the Session extension. This is where incoming data is posted to for a response.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.free_redirects!-Tuple{ComponentModifier}","page":"toolips session","title":"ToolipsSession.free_redirects!","text":"Session Interface\n\nfree_redirects!(cm::ComponentModifier) -> _\n\n\n\nRemoves the \"are you sure you wish to leave\" box that can be created with confirm_redirects!\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.gen_ref-Tuple{}","page":"toolips session","title":"ToolipsSession.gen_ref","text":"Session\n\ngen_ref() -> ::String\n\n\n\nCreates a random string of 16 characters. This is used to map connections to specific events by the session.\n\nexample\n\ngen_ref()\n\"jfuR2wgprielweh3\"\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.get_text-Tuple{ComponentModifier, Component}","page":"toolips session","title":"ToolipsSession.get_text","text":"Session Interface\n\nget_text(cm::ComponentModifier, s::Component) -> ::String\n\n\n\nRetrieves the text of a given Component.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.get_text-Tuple{ComponentModifier, String}","page":"toolips session","title":"ToolipsSession.get_text","text":"Session Interface\n\nget_text(cm::ComponentModifier, s::String) -> ::String\n\n\n\nRetrieves the text of a given Component by name\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.htmlcomponent-Tuple{String}","page":"toolips session","title":"ToolipsSession.htmlcomponent","text":"Session Internals\n\nhtmlcomponent(s::String) -> ::Dict{String, Toolips.Component}\n\n\n\nConverts HTML into a dictionary of components.\n\nexample\n\ns = \"<div id = 'hello' align = 'center'></div>\"\ncomp = htmlcomponent(s)\ncomp[\"hello\"][\"align\"]\n    \"center\"\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.modify!-Tuple{ComponentModifier, Servable, Pair}","page":"toolips session","title":"ToolipsSession.modify!","text":"Session Interface\n\nmodify!(cm::ComponentModifier, s::Servable, p::Pair) -> _\n\n\n\nModifies the key property p[1] to p[2] on s\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.modify!-Tuple{ComponentModifier, Servable, Vararg{Pair}}","page":"toolips session","title":"ToolipsSession.modify!","text":"Session Interface\n\nmodify!(cm::ComponentModifier, s::Servable, p::Pair ...) -> _\n\n\n\nModifies the key properties of p[1] to the value of p[2] on s.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.modify!-Tuple{ComponentModifier, Servable, Vector{Pair{String, String}}}","page":"toolips session","title":"ToolipsSession.modify!","text":"Session Interface\n\nmodify!(cm::ComponentModifier, s::Servable, p::Vector{Pair{String, String}}) -> _\n\n\n\nModifies the key properties of i[1] => i[2] for i in p on s.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.modify!-Tuple{ComponentModifier, String, Pair}","page":"toolips session","title":"ToolipsSession.modify!","text":"Session Interface\n\nmodify!(cm::ComponentModifier, s::Servable, p::Pair) -> _\n\n\n\nModifies the key property p[1] to p[2] on s\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.move!-Tuple{ComponentModifier, Pair{Servable, Servable}}","page":"toolips session","title":"ToolipsSession.move!","text":"Session Interface\n\nmove!(cm::ComponentModifier, p::Pair{Servable, Servable}) -> _\n\n\n\nMoves the servable p[2] to be a child of p[1]\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.move!-Tuple{ComponentModifier, Pair{String, String}}","page":"toolips session","title":"ToolipsSession.move!","text":"Session Interface\n\nmove!(cm::ComponentModifier, p::Pair{String, String}) -> _\n\n\n\nMoves the servable p[2] to be a child of p[1] by name.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.observe!-Tuple{Function, Connection, Integer}","page":"toolips session","title":"ToolipsSession.observe!","text":"Session Interface\n\nobserve!(f::Function, c::Connection, time::Integer) -> _\n\n\n\nCreates a TimedTrigger, and then writes it to the connection.\n\nexample\n\nroute(\"/\") do c::Connection\n    observe!(c, 1000) do cm::ComponentModifier\n        ...\n    end\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.on-Tuple{Function, Connection, AbstractString}","page":"toolips session","title":"ToolipsSession.on","text":"Session Interface\n\non(f::Function, c::Connection, event::AbstractString)\n\n\n\nCreates a new event for the current IP in a session. Performs the function on     the event. The function should take a ComponentModifier as an argument.\n\nexample\n\nroute(\"/\") do c::Connection\n    myp = p(\"hello\", text = \"wow\")\n    on(c, \"load\") do cm::ComponentModifier\n        set_text!(cm, myp, \"not so wow\")\n    end\n    write!(c, myp)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.on-Tuple{Function, Connection, Component, AbstractString}","page":"toolips session","title":"ToolipsSession.on","text":"Interface\n\non(f::Function, c::Connection, s::Component, event::AbstractString)\n\n\n\nCreates a new event for the current IP in a session. Performs the function on     the event. The function should take a ComponentModifier as an argument.\n\nexample\n\nroute(\"/\") do c::Connection\n    myp = p(\"hello\", text = \"wow\")\n    timer = TimedTrigger(5000) do cm::ComponentModifier\n        if cm[myp][:text] == \"wow\"\n            c[:Logger].log(\"wow.\")\n        end\n    end\n    write!(c, myp)\n    write!(c, timer)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.on_keydown-Tuple{Function, Connection, String}","page":"toolips session","title":"ToolipsSession.on_keydown","text":"Session Interface\n\non_keydown(f::Function, c::Connection, key::AbstractString)\n\n\n\nCreates a new event for the current IP in a session. Performs f when the key     is pressed.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.on_keyup-Tuple{Function, Connection, String}","page":"toolips session","title":"ToolipsSession.on_keyup","text":"Session Interface\n\non_keyup(f::Function, c::Connection, key::AbstractString)\n\n\n\nCreates a new event for the current IP in a session. Performs f when the key     is brought up.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.pauseanim!-Tuple{ComponentModifier, Servable}","page":"toolips session","title":"ToolipsSession.pauseanim!","text":"Session Interface\n\npauseanim!(cm::ComponentModifier, s::Servable) -> _\n\n\n\nPauses the servable's animation.\n\nexample\n\non(c, s, \"click\") do cm::ComponentModifier\n    pauseanim!(cm, s)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.pauseanim!-Tuple{ComponentModifier, String}","page":"toolips session","title":"ToolipsSession.pauseanim!","text":"Session Interface\n\npauseanim!(cm::ComponentModifier, name::String) -> _\n\n\n\nPauses a servable's animation by name.\n\nexample\n\non(c, s, \"click\") do cm::ComponentModifier\n    pauseanim!(cm, s.name)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.playanim!-Tuple{ComponentModifier, Servable}","page":"toolips session","title":"ToolipsSession.playanim!","text":"Session Interface\n\nplayanim!(cm::ComponentModifier, s::Servable) -> _\n\n\n\nPlays the servable's animation.\n\nexample\n\non(c, s, \"click\") do cm::ComponentModifier\n    playanim!(cm, s)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.playanim!-Tuple{ComponentModifier, String}","page":"toolips session","title":"ToolipsSession.playanim!","text":"Session Interface\n\nplayanim!(cm::ComponentModifier, name::String) -> _\n\n\n\nPlays a servable's animation by name.\n\nexample\n\non(c, s, \"click\") do cm::ComponentModifier\n    playanim!(cm, s.name)\nend\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.redirect!","page":"toolips session","title":"ToolipsSession.redirect!","text":"Session Interface\n\nredirect!(cm::ComponentModifier, url::AbstractString, delay::Int64 = 0) -> _\n\n\n\nRedirects the session to url. Can be given delay with delay.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_session/#ToolipsSession.remove!-Tuple{ComponentModifier, Servable}","page":"toolips session","title":"ToolipsSession.remove!","text":"Session Interface\n\nremove!(cm::ComponentModifier, s::Servable) -> _\n\n\n\nRemoves the servable s.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.remove!-Tuple{ComponentModifier, String}","page":"toolips session","title":"ToolipsSession.remove!","text":"Session Interface\n\nremove!(cm::ComponentModifier, s::String) -> _\n\n\n\nRemoves the servable s by name.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.remove!-Tuple{Connection, AbstractString, Servable}","page":"toolips session","title":"ToolipsSession.remove!","text":"Session Interface\n\nremove!(c::Connection, fname::AbstractString, s::Servable) -> _\n\n\n\nRemoves a given function call from a connection's Session.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.set_children!-Tuple{ComponentModifier, Servable, Vector{Servable}}","page":"toolips session","title":"ToolipsSession.set_children!","text":"Session Interface\n\nset_children!(cm::ComponentModifier, s::Servable, v::Vector{Servable}) -> _\n\n\n\nSets the children of a given component.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.set_children!-Tuple{ComponentModifier, String, Vector{Servable}}","page":"toolips session","title":"ToolipsSession.set_children!","text":"Session Interface\n\nset_children!(cm::ComponentModifier, s::String, v::Vector{Servable}) -> _\n\n\n\nSets the children of a given component by name.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.set_text!-Tuple{ComponentModifier, Servable, String}","page":"toolips session","title":"ToolipsSession.set_text!","text":"Session Interface\n\nset_text!(cm::ComponentModifier, s::Servable, txt::String) -> _\n\n\n\nSets the inner HTML of a Servable.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_session/#ToolipsSession.set_text!-Tuple{ComponentModifier, String, String}","page":"toolips session","title":"ToolipsSession.set_text!","text":"Session Interface\n\nset_text!(cm::ComponentModifier, s::String, txt::String) -> _\n\n\n\nSets the inner HTML of a Servable by name\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_base64/","page":"toolips base64","title":"toolips base64","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-radius: 30px !important;\n  border-color: gold !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: red !important;\n}\np { color: black !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<img src = \"../../assets/toolipsbase64.png\"></img>","category":"page"},{"location":"extensions/toolips_base64/","page":"toolips base64","title":"toolips base64","text":"Modules = [ToolipsBase64]","category":"page"},{"location":"extensions/toolips_base64/#ToolipsBase64.base64img","page":"toolips base64","title":"ToolipsBase64.base64img","text":"Base64 Interface\n\nbase64img(raw::String, filetype::String = \"png\") -> ::Component\n\n\n\nCreates a Base64 image component from a raw string of image data.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_base64/#ToolipsBase64.base64img-2","page":"toolips base64","title":"ToolipsBase64.base64img","text":"Base64 Interface\n\nbase64img(raw::String, filetype::String = \"png\") -> ::Component\n\n\n\nCreates a Base64 image component from any type shown with the image/png mime. For example, a plot which only shows as a png.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_base64/#ToolipsBase64.base64img-Tuple{String}","page":"toolips base64","title":"ToolipsBase64.base64img","text":"Base64 Interface\n\nbase64img(path::String) -> ::Component\n\n\n\nCreates a Base64 image component from an image file.\n\nexample\n\n\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_base64/#ToolipsBase64.update_base64!","page":"toolips base64","title":"ToolipsBase64.update_base64!","text":"Base64 Interface\n\nupdate_base64!(cm::ComponentModifier, name::Component, raw::String, filetype::String = \"png\") -> ::Component\n\n\n\nUpdates a given img component with the raw source as Base64\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_base64/#ToolipsBase64.update_base64!-2","page":"toolips base64","title":"ToolipsBase64.update_base64!","text":"Base64 Interface\n\nupdate_base64!(cm::ComponentModifier, name::String, raw::String, filetype::String = \"png\") -> ::Component\n\n\n\nUpdates a given img component by name with the raw source as Base64\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_base64/#ToolipsBase64.update_base64!-3","page":"toolips base64","title":"ToolipsBase64.update_base64!","text":"Base64 Interface\n\nupdate_base64!(cm::ComponentModifier, name::String, raw::Any, filetype::String = \"png\") -> ::Component\n\n\n\nUpdates a given img component by name with the raw source as Base64\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_base64/#ToolipsBase64.update_base64!-4","page":"toolips base64","title":"ToolipsBase64.update_base64!","text":"Base64 Interface\n\nupdate_base64!(cm::ComponentModifier, name::Component, raw::Any, filetype::String = \"png\") -> ::Component\n\n\n\nUpdates a given img component with the raw source as Base64\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_markdown/","page":"toolips markdown","title":"toolips markdown","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-radius: 30px !important;\n  border-color: gray !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: gray !important;\n}\np { color: #00147e !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<div align = \"center\">\n<img src = \"../../assets/toolipsmarkdown.png\"></img>\n</div>","category":"page"},{"location":"extensions/toolips_markdown/","page":"toolips markdown","title":"toolips markdown","text":"Modules = [ToolipsMarkdown]","category":"page"},{"location":"extensions/toolips_markdown/#ToolipsMarkdown.ToolipsMarkdown","page":"toolips markdown","title":"ToolipsMarkdown.ToolipsMarkdown","text":"Created in July, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolips Markdown\n\nA simple markdown to Toolips Component parser. Wraps markdown components into a Toolips.divier\n\nModule Composition\n\nToolipsMarkdown\n\n\n\n\n\n","category":"module"},{"location":"extensions/toolips_markdown/#ToolipsMarkdown.tmd","page":"toolips markdown","title":"ToolipsMarkdown.tmd","text":"Toolips Markdown\n\ntmd(name::String = \"tmd\", s::String = \"\") -> ::Component\n\n\n\nTurns a markdown string into a Toolips Component. Markdown will always use default styling.\n\nexample\n\nroute(\"/\") do c::Connection\n    mymdcomp = tmd(\"mainmarkdown\", \"# Hello! [click](http://toolips.app/)\")\n    write!(c, mymdcomp)\nend\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_markdown/#ToolipsMarkdown.@tmd_str-Tuple{String}","page":"toolips markdown","title":"ToolipsMarkdown.@tmd_str","text":"Toolips Markdown\n\n@tmd_str -> ::Component\n\n\n\nTurns a markdown string into a Toolips Component. Markdown will always use default styling.\n\nexample\n\ntmd\"#hello world\"\n\n\n\n\n\n","category":"macro"},{"location":"cli/","page":"command-line interface","title":"command-line interface","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: #FDF8FF !important;}\nheader {background-color: #FDF8FF !important}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  border-radius: 30px !important;\n  border-color: lightblue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: #FFE5B4 !important;\n}\np {font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: #565656;}\n</style>","category":"page"},{"location":"cli/#command-line-interface","page":"command-line interface","title":"command-line interface","text":"","category":"section"},{"location":"cli/","page":"command-line interface","title":"command-line interface","text":"Toolips has a rather robust, but easy to understand command-line interface that is used via the WebServer type. Extensions can be accessed by indexing a WebServer with a Symbol or the extensions(::WebServer) method, and routes can be accessed by doing routes(::WebServer).","category":"page"},{"location":"cli/","page":"command-line interface","title":"command-line interface","text":"using Toolips\n\nst = ServerTemplate()\nr = route(\"/\") do c::Connection\n  write!(c, \"my return\")\nend\nst.add(r)\n\nwebserver = st.start()\n\nprintln(extensions(webserver))\n\nprintln(routes(webserver))","category":"page"},{"location":"cli/","page":"command-line interface","title":"command-line interface","text":"1-element Dict{Symbol, ServerExtension}\n:Logger => Toolips.Logger(...)\n\n1-element Dict{String, Function}\n\"/\" => #5","category":"page"},{"location":"cli/","page":"command-line interface","title":"command-line interface","text":"We can also use the WebServer with the route! function with the following methods:","category":"page"},{"location":"cli/","page":"command-line interface","title":"command-line interface","text":"route!(::WebServer, ::String, ::Function)\nroute!(::Function, ::WebServer, ::String)\nroute!(::WebServer, ::Route)","category":"page"},{"location":"cli/#Toolips.route!-Tuple{WebServer, String, Function}","page":"command-line interface","title":"Toolips.route!","text":"Interface\n\nroute!(ws::WebServer, r::String, f::Function) -> _\n\n\n\nReroutes a server's route r to function f.\n\nexample\n\nws = MyProject.start()\n\nfunction myf(c::Connection)\n    write!(c, \"pasta\")\nend\nroute!(ws, \"/\", myf)\n\n\n\n\n\n","category":"method"},{"location":"cli/#Toolips.route!-Tuple{Function, WebServer, String}","page":"command-line interface","title":"Toolips.route!","text":"Interface\n\nroute!(f::Function, ws::WebServer, r::String) -> _\n\n\n\nReroutes a server's route r to function f.\n\nexample\n\nws = MyProject.start()\nroute!(ws, \"/\") do c\n    c[:Logger].log(\"rerouted!\")\nend\n\n\n\n\n\n","category":"method"},{"location":"cli/#Toolips.route!-Tuple{WebServer, Route}","page":"command-line interface","title":"Toolips.route!","text":"Interface\n\nroute!(ws::WebServer, r::Route) -> _\n\n\n\nReroutes a server's route r.\n\nexample\n\nws = MyProject.start()\nr = route(\"/\") do c\n\nend\nroute!(ws, r)\n\n\n\n\n\n","category":"method"},{"location":"core/","page":"servers","title":"servers","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: #FDF8FF !important;}\nheader {background-color: #FDF8FF !important}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  border-radius: 30px !important;\n  border-color: lightblue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: #FFE5B4 !important;\n}\np {font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: #565656;}\n</style>","category":"page"},{"location":"core/#servers","page":"servers","title":"servers","text":"","category":"section"},{"location":"core/","page":"servers","title":"servers","text":"ToolipsServers are created by ServerTemplates. The main type of ToolipsServer is the WebServer, which is provided as a return from the ServerTemplate.start() function.","category":"page"},{"location":"core/#server-templates","page":"servers","title":"server templates","text":"","category":"section"},{"location":"core/","page":"servers","title":"servers","text":"ServerTemplate","category":"page"},{"location":"core/#Toolips.ServerTemplate","page":"servers","title":"Toolips.ServerTemplate","text":"ServerTemplate\n\nip::String\nport::Integer\nroutes::Vector{Route}\nextensions::Dict\nremove::Function\nadd::Function\nstart::Function -\n\nThe ServerTemplate is used to configure a server before running. These are usually made and started inside of a main server file.\n\nexample\n\nst = ServerTemplate()\n\nwebserver = ServerTemplate.start()\n\n\n\nfield info\n\nip::String - IP the server should serve to.\nport::Integer - Port to listen on.\nroutes::Vector{Route} - A vector of routes to provide to the server\nextensions::Vector{ServerExtension} - A vector of extensions to load into\n\nthe server.\n\nremove(::Int64)::Function - Removes routes by index.\nremove(::String)::Function - Removes routes by name.\nremove(::Symbol)::Function - Removes extension by Symbol representing\n\ntype, e.g. :Logger\n\nadd(::Route ...)::Function - Adds the routes to the server.\nadd(::ServerExtension ...)::Function - Adds the extensions to the server.\nstart()::Function - Starts the server.\n\n\n\nconstructors\n\nServerTemplate(ip::String = \"127.0.0.1\", port::Int64 = 8001,           routes::Vector{Route} = Vector{Route}());           extensions::Vector{ServerExtension} = [Logger()]           connection::Type)\n\n\n\n\n\n","category":"type"},{"location":"core/#toolips-servers","page":"servers","title":"toolips servers","text":"","category":"section"},{"location":"core/","page":"servers","title":"servers","text":"The ServerTemplate.start() function returns a sub-type of ToolipsServer, usually a WebServer.","category":"page"},{"location":"core/","page":"servers","title":"servers","text":"ToolipsServer","category":"page"},{"location":"core/#Toolips.ToolipsServer","page":"servers","title":"Toolips.ToolipsServer","text":"abstract type ToolipsServer\n\nToolipsServers are returned whenever the ServerTemplate.start() field is called. If you are running your server as a module, it should be noted that commonly a global start() method is used and returns this server, and dev is where this module is loaded, served, and revised.\n\nConsistencies\n\nroutes::Dict - The server's route => function dictionary.\nextensions::Dict - The server's currently loaded extensions.\nserver::Any - The server, whatever type it may be...\n\n\n\n\n\n","category":"type"},{"location":"core/","page":"servers","title":"servers","text":"The WebServer type is similar to a Connection in that it can be routed, and holds the Connection extensions. This type is useful for when we want to control our server from a command-line interface in our Julia REPL.","category":"page"},{"location":"core/","page":"servers","title":"servers","text":"using Toolips\n\nmyroute = route(\"/\") do c::Connection\n  myp = p(\"myp\", text = \"Hello world!\")\n  mydiv = divider(\"mydiv\")\n  push!(mydiv, myp)\n  write!(c, mydiv)\nend\n\nst = ServerTemplate()\nst.add(myroute)\nourwebserver = st.start()","category":"page"},{"location":"core/","page":"servers","title":"servers","text":"WebServer","category":"page"},{"location":"core/#Toolips.WebServer","page":"servers","title":"Toolips.WebServer","text":"WebServer <: ToolipsServer\n\nhost::String\nroutes::Dict\nextensions::Dict\nserver::Any - \n\nA web-server is given as a return from a ServerTemplate whenever ServerTemplate.start() is ran. It can be rerouted with route! and indexed similarly to the Connection, with Symbols representing extensions and Strings representing routes.\n\nexample\n\nst = ServerTemplate()\nws = st.start()\nroutes(ws)\n...\nextensions(ws)\n...\nroute!(ws, \"/\") do c::Connection\n    write!(c, \"hello\")\nend\n\n\n\n\n\n","category":"type"},{"location":"core/","page":"servers","title":"servers","text":"We can call the routes and extensions methods on a WebServer, just like a Connection","category":"page"},{"location":"core/","page":"servers","title":"servers","text":"Toolips.routes(::WebServer)\nToolips.extensions(::WebServer)","category":"page"},{"location":"core/#Toolips.routes-Tuple{WebServer}","page":"servers","title":"Toolips.routes","text":"Interface\n\nroutes(ws::WebServer) -> ::Dict{String, Function}\n\n\n\nReturns the server's routes.\n\nexample\n\nws = MyProject.start()\nroutes(ws)\n    \"/\" => home\n    \"404\" => fourohfour\n\n\n\n\n\n","category":"method"},{"location":"core/#Toolips.extensions-Tuple{WebServer}","page":"servers","title":"Toolips.extensions","text":"Interface\n\nextensions(ws::WebServer) -> ::Dict{Symbol, ServerExtension}\n\n\n\nReturns the server's extensions.\n\nexample\n\nws = MyProject.start()\nextensions(ws)\n    :Logger => Logger(blah blah blah)\n\n\n\n\n\n","category":"method"},{"location":"core/","page":"servers","title":"servers","text":"Similarly, we can index our WebServer with a Symbol, or use the route! method in the same manor as we would a Connection.","category":"page"},{"location":"core/","page":"servers","title":"servers","text":"using Toolips\n\nmyroute = route(\"/\") do c::Connection\n  myp = p(\"myp\", text = \"Hello world!\")\n  mydiv = divider(\"mydiv\")\n  push!(mydiv, myp)\n  write!(c, mydiv)\nend\n\nst = ServerTemplate()\nst.add(myroute)\nourwebserver = st.start()\n\nourwebserver[:Logger].log(\"Hello!\")\nroute!(ourwebserver, \"/\") do c::Connection\n  write!(c, p(\"myp\", text = \"our new route\"))\nend\nfunction newr(c::Connection)\n  write!(c, \"hello\")\nend\nroute!(ourwebserver, \"/\", newr)","category":"page"},{"location":"core/","page":"servers","title":"servers","text":"getindex(::WebServer, ::Symbol)","category":"page"},{"location":"core/#Base.getindex-Tuple{WebServer, Symbol}","page":"servers","title":"Base.getindex","text":"Interface\n\ngetindex(ws::WebServer, s::Symbol) -> ::ServerExtension\n\n\n\nIndexes the extensions in ws.\n\nexample\n\nws = MyProject.start()\nws[:Logger].log(\"hi\")\n\n\n\n\n\n","category":"method"},{"location":"core/#server-extensions","page":"servers","title":"server extensions","text":"","category":"section"},{"location":"core/","page":"servers","title":"servers","text":"A [ServerExtension] is an abstract type that can be used to add new capabilities to a ToolipsServer. These extensions are provided in a Vector{ServerExtension} to the ServerTemplate. We can create this Vector by simply putting a list of extensions together.","category":"page"},{"location":"core/","page":"servers","title":"servers","text":"using Toolips\n\nextensions = [Logger(), Files()]","category":"page"},{"location":"core/","page":"servers","title":"servers","text":"Toolips includes two extensions by default, the Files extension and the Logger extensions. This Vector is provided as a key-word argument to the ServerTemplate constructor.","category":"page"},{"location":"core/","page":"servers","title":"servers","text":"using Toolips\n\nextensions = [Logger(), Files()]\n\nst = ServerTemplate(extensions = extensions)\nst.start()","category":"page"},{"location":"requests/","page":"requests","title":"requests","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: #FDF8FF !important;}\nheader {background-color: #FDF8FF !important}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  border-radius: 30px !important;\n  border-color: lightblue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: #FFE5B4 !important;\n}\np {font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: #565656;}\n</style>","category":"page"},{"location":"requests/","page":"requests","title":"requests","text":"The get and post methods from toolips are quick bindings that can make requests on the fly.","category":"page"},{"location":"requests/","page":"requests","title":"requests","text":"data = get(\"https://ems.computer\")\npostdata = post(\"https://ems.computer\", \"hello\")","category":"page"},{"location":"requests/","page":"requests","title":"requests","text":"Toolips.get\nToolips.post","category":"page"},{"location":"requests/#Base.get","page":"requests","title":"Base.get","text":"Interface\n\nget(url::String) -> ::String\n\n\n\nQuick binding for an HTTP GET request.\n\nexample\n\nbody = get(\"/\")\n    \"hi\"\n\n\n\n\n\n","category":"function"},{"location":"requests/#Toolips.post","page":"requests","title":"Toolips.post","text":"Interface\n\npost(url::String, body::String) -> ::String\n\n\n\nQuick binding for an HTTP POST request.\n\nexample\n\nresponse = post(\"/\")\n    \"my response\"\n\n\n\n\n\n","category":"function"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: #FDF8FF !important;}\nheader {background-color: #FDF8FF !important}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  border-radius: 30px !important;\n  border-color: lightblue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: #FFE5B4 !important;\n}\np {font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: #565656;}\n</style>","category":"page"},{"location":"projects/#projects","page":"creating projects","title":"projects","text":"","category":"section"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"Toolips projects are normal Julia modules. The projects can often be added with Pkg, and do not require any extra bootstrap in order to be started. Toolips projects can be setup either using the new_app or the new_webapp method. If you really want to, you can also avoid these two entirely and create a project from scratch. new_webapp will create a new full-stack toolips app.  new_app creates a minimalist application, ideal for simple APIs.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"new_webapp generates the directory public\nnew_webapp loads the Files\nnew_webapp adds ToolipsSession\nnew_webapp adds ToolipsDefaults","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"Toolips.new_app\nToolips.new_webapp","category":"page"},{"location":"projects/#Toolips.new_app","page":"creating projects","title":"Toolips.new_app","text":"Core\n\nnew_app(::String) -> _\n\n\n\nCreates a minimalistic app, usually used for creating APIs and endpoints.\n\nexample\n\nusing Toolips\nToolips.new_app(\"ToolipsApp\")\n\n\n\n\n\n","category":"function"},{"location":"projects/#Toolips.new_webapp","page":"creating projects","title":"Toolips.new_webapp","text":"Core\n\nnew_webapp(::String) -> _\n\n\n\nCreates a fully-featured Toolips web-app. Adds ToolipsSession, ideal for full-stack web-sites.\n\nexample\n\nusing Toolips\nToolips.new_webapp(\"ToolipsApp\")\n\n\n\n\n\n","category":"function"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"These two methods both take one positional argument, and that is the name of your project. These project names should follow the Julia convention for Modules, which is capitalizing the first letter of each word in the name.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"using Toolips\n# Don't do this...\nToolips.new_webapp(\"myapp\")\n# Do this!\nToolips.new_webapp(\"MyApp\")","category":"page"},{"location":"projects/#directory-structure","page":"creating projects","title":"directory structure","text":"","category":"section"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"Once a project has been created, the directory structure should look like that of a typical Julia project. Let's go ahead and generate a project in order to take a look.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"using Toolips\n\nToolips.new_webapp(\"MyWebApp\")\nToolips.new_app(\"MyApp\")","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"We will start by taking a look at MyApp. I will use another module, PrintFileTree to take a look at the files within this new directory.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"using PrintFileTree\n\ncd(\"MyApp\")\nPrintFileTree.printfiletree(\".\")","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":".\n├── Manifest.toml\n├── Project.toml\n├── dev.jl\n├── logs\n│   └── log.txt\n├── prod.jl\n└── src\n    └── MyApp.jl\n\n2 directories, 6 files","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"The Project.toml and Manifest.toml files are both typical of Julian Pkg projects. These two files hold all of the dependency information for your project. dev.jl and prod.jl define environmental variables for both a production and development environment respectively.","category":"page"},{"location":"projects/#environments","page":"creating projects","title":"environments","text":"","category":"section"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"We can access our environment by either using Pkg.activate(\".\") or by activating from the Pkg REPL. The REPL can be entered from the Julia REPL by pressing ]. Once activated, we can add new dependencies with add, and remove dependencies with rm.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"using Pkg\n\nPkg.activate(\".\")\nPkg.add(\"ToolipsSession\")","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"Our environment files, dev.jl and prod.jl, contain the information that our server needs to be started. This includes extensions, our IP, our port, and a few dependencies. Do NOT put secrets into here! Never hardcode your secrets, these should be defined inside of Bash somewhere and brought into Julia in some other way.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"#==\ndev.jl is an environment file. This file loads and starts servers, and\ndefines environmental variables, setting the scope a lexical step higher\nwith modularity.\n==#\nusing Pkg; Pkg.activate(\".\")\nusing Toolips\nusing Revise\nusing MyApp\n\nIP = \"127.0.0.1\"\nPORT = 8000\nextensions = [Logger()]\nMyAppServer = MyApp.start(IP, PORT, extensions)","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"The dev.jl file only differs from the prod.jl file in one way by default, and that is Revise. Revise.jl is an awesome project by timholy that allows us to modify modules while they are loaded into Main. This is useful because it allows us to develop websites with zero downtime by rerouting to new code via the command-line-interface. The file completes by calling MyApp.start, a function that creates a ServerTemplate for us and starts it to return a WebServer.","category":"page"},{"location":"projects/#starting-projects","page":"creating projects","title":"starting projects","text":"","category":"section"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"In order to start our project, we have three options.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"1: We can include dev.jl with the include method.\n2: We can run julia -L on dev.jl from Bash/CMD.\n3: We can import our module with using and run the MyApp.start method manually.","category":"page"},{"location":"projects/#:-including-dev.jl","page":"creating projects","title":"1: including dev.jl","text":"","category":"section"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"Including dev.jl is probably the most straight-forward approach to starting a toolips server.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"include(\"dev.jl\")\n Activating project at `~/dev/toolips/examples/MyApp`\n[ Info: Precompiling MyApp [6e1095f5-2a16-48a3-8439-38092e9c2ced]\n[2022:07:02:02:17]: 🌷 toolips> Toolips Server starting on port 8000\n[2022:07:02:02:17]: 🌷 toolips> Successfully started server on port 8000\n[2022:07:02:02:17]: 🌷 toolips> You may visit it now at http://127.0.0.1:8000","category":"page"},{"location":"projects/#:-julia-L-dev.jl","page":"creating projects","title":"2: julia -L dev.jl","text":"","category":"section"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"Using julia -L is ideal if you want to deploy the project into production, as this is a command that can be used by a supervisor to start your server. However, it is not going to break anything to use this all the time, it makes no difference.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"[emmac ems-computer MyApp]$ julia -L dev.jl\n  Activating project at `~/dev/toolips/examples/MyApp`\n[2022:07:02:02:19]: 🌷 toolips> Toolips Server starting on port 8000\n[2022:07:02:02:19]: 🌷 toolips> Successfully started server on port 8000\n[2022:07:02:02:19]: 🌷 toolips> You may visit it now at http://127.0.0.1:8000","category":"page"},{"location":"projects/#:-calling-start","page":"creating projects","title":"3: calling start","text":"","category":"section"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"Calling start is ideal if you either intend for an end-user to import your toolips project as a module, or you are calling the project from an entirely different project above it.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"include(\"src/MyApp.jl\")\nusing Main.MyApp\nusing Toolips\nMyApp.start(\"127.0.0.1\", 8000, [Logger()])\n[2022:07:02:02:22]: 🌷 toolips> Toolips Server starting on port 8000\n[2022:07:02:02:22]: 🌷 toolips> Successfully started server on port 8000\n[2022:07:02:02:22]: 🌷 toolips> You may visit it now at http://127.0.0.1:8000","category":"page"},{"location":"projects/#project-source","page":"creating projects","title":"project source","text":"","category":"section"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"The project source files are contained within the src directory. The default project file looks like this:","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"module MyApp\nusing Toolips\n\n\n\"\"\"\nhome(c::Connection) -> _\n--------------------\nThe home function is served as a route inside of your server by default. To\n    change this, view the start method below.\n\"\"\"\nfunction home(c::Connection)\n    write!(c, p(\"helloworld\", text = \"hello world!\"))\nend\n\nfourofour = route(\"404\") do c\n    write!(c, p(\"404message\", text = \"404, not found!\"))\nend\n\n\"\"\"\nstart(IP::String, PORT::Integer, extensions::Vector{Any}) -> ::Toolips.WebServer\n--------------------\nThe start function comprises routes into a Vector{Route} and then constructs\n    a ServerTemplate before starting and returning the WebServer.\n\"\"\"\nfunction start(IP::String = \"127.0.0.1\", PORT::Integer = 8000,\n    extensions::Vector = [Logger()])\n    rs = routes(route(\"/\", home), fourofour)\n    server = ServerTemplate(IP, PORT, rs, extensions = extensions)\n    server.start()\nend\n\nend # - module","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"In this file, we are shown the two different techniques which can be used to create a Route. The first of these is the example of home, where a function is written, and later passed into the route method. This method takes a string and a function, in either position, and can also be called with the do syntax such as in the example of fourofour. The start method is the final piece of the puzzle, which takes an IP, port, and Vector{ServerExtension}. The first line of the function calls the routes method to comprise our two routes into a Vector{Route}. The second line constructs a ServerTemplate using our IP, port, routes, and server-extensions as the key-word argument extensions. Finally, server.start() is called, returning a WebServer","category":"page"},{"location":"projects/#project-directories","page":"creating projects","title":"project directories","text":"","category":"section"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"Along with our new app, the logs directory was created. As you might expect, this directory contains a log of server output. The log output is provided by the Logger extension. One difference that our MyWebApp project contains is the public directory, which is used by the Files extension.","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"cd(\"MyWebApp\")\nusing PrintFileTree\n\nPrintFileTree.printfiletree(\".\")\n.\n├── Manifest.toml\n├── Project.toml\n├── dev.jl\n├── logs\n│   └── log.txt\n├── prod.jl\n├── public\n└── src\n    └── MyWebApp.jl\n","category":"page"},{"location":"projects/","page":"creating projects","title":"creating projects","text":"All of the files inside of this directory will be served into the server at the route corresponding with their directory, where / is public.","category":"page"},{"location":"extensions/toolips_remote/","page":"toolips remote","title":"toolips remote","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-color: blue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: orange !important;\n}\np { color: black !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<img src = \"../../assets/toolipsremote.png\"></img>","category":"page"},{"location":"extensions/toolips_remote/","page":"toolips remote","title":"toolips remote","text":"Modules = [ToolipsRemote]","category":"page"},{"location":"extensions/toolips_remote/#ToolipsRemote.ToolipsRemote","page":"toolips remote","title":"ToolipsRemote.ToolipsRemote","text":"Created in June, 2022 by chifi - an open source software dynasty. by team toolips This software is MIT-licensed.\n\nToolipsRemote\n\nExtension for:\n\nToolips This module provides the server extension Remote, an extension\n\nthat allows one to remotely call server commands from another Julia terminal. You can connect to a served Remote extension using the connect method.\n\nModule Composition\n\nToolipsRemote\n\n\n\n\n\n","category":"module"},{"location":"extensions/toolips_remote/#ToolipsRemote.Hash","page":"toolips remote","title":"ToolipsRemote.Hash","text":"Hash\n\nf::Function - The f function is used to return the Hash's value. Creates an anonymous hashing function for a string of length(n). Can be   indexed with nothing to retrieve Hash.\n\nexample\n\n# 64-character hash\nh = Hash(64)          #    vv getindex(::Hash)\nbuffer = Base.SecretBuffer(hash[])\nif String(buffer.data) == \"Password\"\n\n\n\nconstructors\n\nHash(n::Integer = 32)\nHash(s::String)\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_remote/#ToolipsRemote.Remote","page":"toolips remote","title":"ToolipsRemote.Remote","text":"Remote <: Toolips.ServerExtension\n\ntype::Vector{Symbol}\nremotefunction::Function\nf::Function\nlogins::Dict{String, Hash}\nusers::Dict\nmotd::String - A message to be shown at the login screen.\n\nThe remote extension makes it possible to connect to your server from another Julia REPL. Can be provided with an alternative remote function as the first positional argument, as well as a new serving function as the second positional argument. A remote function should take a Connection and a String. A serving function should take only a Connection.\n\nexample\n\nr = Remote()\nst = ServerTemplate(extensions = [Remote()])\n\n\n\nconstructors\n\nRemote(remotefunction::Function = evaluator,         usernames::Vector{String};         motd::String, serving_f::Function)\n\n\n\n\n\n","category":"type"},{"location":"extensions/toolips_remote/#ToolipsRemote.connect-Tuple{String}","page":"toolips remote","title":"ToolipsRemote.connect","text":"Remote\n\nconnect(url::String) -> _\n\n\n\nConnects to a toolips session extension at the given URL. Ensure http:// is provided prior to the URL.\n\nexample\n\nconnect(\"http://127.0.0.1:8000\")\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.connected_repl-Tuple{AbstractString, String, String}","page":"toolips remote","title":"ToolipsRemote.connected_repl","text":"Remote\n\ngetindex(h::Hash) -> ::String\n\n\n\nCreates the linked remote REPL.\n\nexample\n\nconnectedrepl(\"myrepl\", \"http://127.0.0.1:8000\", key::String)\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.evaluator-Tuple{Connection, String}","page":"toolips remote","title":"ToolipsRemote.evaluator","text":"Remote\n\ngetindex(h::Hash) -> ::String\n\n\n\nRuns eval on any incoming connection strings.\n\nexample\n\nconnectedrepl(\"myrepl\", \"http://127.0.0.1:8000\", key::String)\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.getindex-Tuple{ToolipsRemote.Hash}","page":"toolips remote","title":"ToolipsRemote.getindex","text":"Remote\n\ngetindex(h::Hash) -> ::String\n\n\n\nRetrieves the value of the hashed data.\n\nexample\n\npwd = h[]\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.helpme-Tuple{Vector{String}, Connection}","page":"toolips remote","title":"ToolipsRemote.helpme","text":"helpme(args::Vector{String}) -> ::String\n\nThis is one of the default controller() functions. All of these functions are going to take args::Vector{String}. This will be the only function with this sort of documentation, as the rest will contain arg usage.\n\n\n\n\n\n","category":"method"},{"location":"extensions/toolips_remote/#ToolipsRemote.serve_remote-Tuple{Connection}","page":"toolips remote","title":"ToolipsRemote.serve_remote","text":"Remote\n\nserve_remote(c::Connection) -> _\n\n\n\nServers a remote login via the connect() method. This method is routed to /remote/connect\n\n\n\n\n\n","category":"method"},{"location":"developer_api/","page":"developer API","title":"developer API","text":"If you're looking at the internals, you are probably good enough at reading documentation... Here are the doc-strings, my friend. Thank you for contributing.","category":"page"},{"location":"developer_api/","page":"developer API","title":"developer API","text":"Toolips.write(::SpoofStream, ::Any)\nToolips.write(::SpoofStream, ::Servable)\nToolips.create_serverdeps\nToolips.serverfuncdefs\nToolips._start\nToolips.generate_router\nToolips._log\nToolips.string\nToolips.SpoofConnection\nToolips.SpoofStream\nToolips.route_from_dir\nToolips.show(::Base.TTY, ::Component)\nToolips.show(::Component)\nToolips.show_log\nToolips.@L_str\nToolips.has_extension(d::Dict, t::Type)\nToolips.argsplit\nToolips.string(::Vector{UInt8})\nToolips.showchildren","category":"page"},{"location":"developer_api/#Base.write-Tuple{SpoofStream, Any}","page":"developer API","title":"Base.write","text":"Internals\n\nwrite(s::SpoofStream, e::Any) -> _\n\n\n\nA binding to Base.write that allows one to write to SpoofStream.text.\n\nexample\n\ns = SpoofStream()\nwrite(s, \"hi\")\nprintln(s.text)\n    hi\n\n\n\n\n\n","category":"method"},{"location":"developer_api/#Base.write-Tuple{SpoofStream, Servable}","page":"developer API","title":"Base.write","text":"Internals\n\nwrite(s::SpoofStream, e::Servable) -> _\n\n\n\nA binding to Base.write that allows one to write a Servable to SpoofStream.text.\n\nexample\n\ns = SpoofStream()\nwrite(s, p(\"hello\"))\nprintln(s.text)\n    <p id = \"hello\"></p>\n\n\n\n\n\n","category":"method"},{"location":"developer_api/#Toolips.create_serverdeps","page":"developer API","title":"Toolips.create_serverdeps","text":"Internals\n\ncreate_serverdeps(name::String, inc::String) -> _\n\n\n\nCreates the essential portions of the webapp file structure, where name is the project's name and inc is any extensions or strings to incorporate at the top of the file.\n\nexample\n\ncreate_serverdeps(\"ToolipsApp\")\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips.serverfuncdefs","page":"developer API","title":"Toolips.serverfuncdefs","text":"Core\n\nserverfuncdefs(::AbstractVector, ::String, ::Integer,\n\n::Dict) -> (::Function, ::Function, ::Function)\n\nThis method is used internally by a constructor to generate the functions add, start, and remove for the ServerTemplate.\n\nexample\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips._start","page":"developer API","title":"Toolips._start","text":"Core - Internals\n\n_start(routes::AbstractVector, ip::String, port::Integer,\n\nextensions::Dict, c::Type) -> ::WebServer\n\nThis is an internal function for the ServerTemplate. This function is binded to     the ServerTemplate.start field.\n\nexample\n\nst = ServerTemplate()\nst.start()\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips.generate_router","page":"developer API","title":"Toolips.generate_router","text":"Core - Internals\n\ngenerate_router(routes::AbstractVector, server::Any, extensions::Dict,\n\n        conn::Type)\n\n\n\nThis method is used internally by the _start method. It returns a closure function that both routes and calls functions.\n\nexample\n\nserver = Sockets.listen(Sockets.InetAddr(parse(IPAddr, ip), port))\nif has_extension(extensions, Logger)\n    extensions[Logger].log(1,\n     \"Toolips Server starting on port \" * string(port))\nend\nroutefunc, rdct, extensions = generate_router(routes, server, extensions,\n                                                Connection)\n@async HTTP.listen(routefunc, ip, port, server = server)\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips._log","page":"developer API","title":"Toolips._log","text":"Extensions\n\n_log(level::Int64, message::String, levels::Dict, out::String) -> _\n\n\n\nBinded call for the field log() inside of Logger(). See ?(Logger) for more     details on the field log. All arguments are fields of that type. Return is a     printout into the REPL as well as an append to the log file, provided by the     out URI. –––––––––\n\nexample (Closure from Logger)\n\nlog(level::Int64, message::String) = _log(level, message, levels, out)\nlog(message::String) = _log(1, message, levels, out)\n\n\n\n\n\nExtensions\n\n_log(http::HTTP.Stream, message::String) -> _\n\n\n\nBinded call for the field log() inside of Logger(). This will log both to the     JavaScript/HTML console. –––––––––\n\nexample (Closure from Logger)\n\nlog(http::HTTP.Stream, message::String) = _log(http, message)\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Base.string","page":"developer API","title":"Base.string","text":"Internals\n\nstring(r::Vector{UInt8}) -> ::String\n\n\n\nTurns a vector of UInt8s into a string.\n\n\n\n\n\nInterface\n\nstring(c::Component) -> ::String\n\n\n\nShows c as a string representation of itself.\n\nexample\n\nc = divider(\"example\", align = \"center\")\nstring(c)\n    \"divider: align = center\"\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips.SpoofConnection","page":"developer API","title":"Toolips.SpoofConnection","text":"SpoofConnection <: AbstractConnection\n\nroutes::Dict\nhttp::SpoofStream\nextensions::Dict -\n\nBuilds a fake connection with a SpoofStream. Useful if you want to write a Servable without a server.\n\nexample\n\nfakec = SpoofConnection()\nservable = Component()\n# write!(::AbstractConnection, ::Servable):\nwrite!(fakec, servable)\n\n\n\nfield info\n\nroutes::Dict - A dictionary of routes, usually left empty.\nhttp::SpoofStream - A fake http stream that instead writes output to a string.\nextensions::Dict - A dictionary of extensions, usually empty.\n\n\n\nconstructors\n\nSpoofStream(r::Dict, http::SpoofStream, extensions::Dict)\nSpoofStream()\n\n\n\n\n\n","category":"type"},{"location":"developer_api/#Toolips.SpoofStream","page":"developer API","title":"Toolips.SpoofStream","text":"SpoofStream\n\ntext::String\n\nThe SpoofStream allows us to fake a connection by building a SpoofConnection which will write to the SpoofStream.text field whenever write! is called. This is useful for testing, or just writing servables into a string.\n\nexample\n\nstream = SpoofStream()\nwrite(stream, \"hello!\")\nprintln(stream.text)\n\n    hello!\nconn = SpoofConnection()\nservab = Component()\nwrite!(conn, servab)\n\n\n\nfield info\n\ntext::String - The text written to the stream.\n\n\n\nconstructors\n\nSpoofStream()\n\n\n\n\n\n","category":"type"},{"location":"developer_api/#Toolips.route_from_dir","page":"developer API","title":"Toolips.route_from_dir","text":"Extensions\n\nroutefromdir(dir::String) -> ::Vector{String}\n\n\n\nRecursively appends filenames for a directory AND all subsequent directories.\n\nexample\n\nx::Vector{String} = route_from_dir(\"mypath\")\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Base.show-Tuple{Base.TTY, Component}","page":"developer API","title":"Base.show","text":"Interface\n\nshow(t::Base.TTY, x::Component) -> _\n\n\n\nShows a component as markdown in a terminal.\n\nexample\n\n# In the terminal, elsewhere the component will show as HTML.\nshow(x)\n\n\n\n\n\n","category":"method"},{"location":"developer_api/#Base.show-Tuple{Component}","page":"developer API","title":"Base.show","text":"Interface\n\nshow(x::Component) -> _\n\n\n\nShows a component as HTML.\n\nexample\n\nshow(x)\n\n\n\n\n\n","category":"method"},{"location":"developer_api/#Toolips.show_log","page":"developer API","title":"Toolips.show_log","text":"Extensions\n\nshow_log(level::Int64, message::String, levels::Dict{Any, Crayon},\n\n            prefix::String, time::Any)\n\n\n\nPrints a log to the screen.\n\nexample\n\nshow_log(1, \"hello!\", levels, \"toolips> \", now()\n\n[2022:05:23:22:01] toolips> hello!\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Toolips.@L_str","page":"developer API","title":"Toolips.@L_str","text":"Interface\n\nL_str(s::String) -> ::String\n\n\n\nCreates a literal string\n\nexample\n\nx = 5\nL\"dollar_signx\" # pretend dollar_sign is a dollar sign.\n\n\n\n\n\n","category":"macro"},{"location":"developer_api/#Toolips.has_extension-Tuple{Dict, Type}","page":"developer API","title":"Toolips.has_extension","text":"Internals\n\nhas_extension(d::Dict, t::Type) -> ::Bool\n\n\n\nChecks if d has an extension of type t.\n\nexample\n\nif has_extension(d, Logger)\n    d[:Logger].log(\"it has a logger, I think.\")\nend\n\n\n\n\n\n","category":"method"},{"location":"developer_api/#Toolips.argsplit","page":"developer API","title":"Toolips.argsplit","text":"Internals\n\nargsplit(args::Vector{AbstractString}) -> ::Dict{Symbol, Any}\n\n\n\nUsed by the getargs method to parse GET arguments into a Dict.\n\nexample\n\nargsplit([\"c=5\", \"b=8\"])\n    Dict(:c => 5, :b => 8)\n\n\n\n\n\n","category":"function"},{"location":"developer_api/#Base.string-Tuple{Vector{UInt8}}","page":"developer API","title":"Base.string","text":"Internals\n\nstring(r::Vector{UInt8}) -> ::String\n\n\n\nTurns a vector of UInt8s into a string.\n\n\n\n\n\n","category":"method"},{"location":"developer_api/#Toolips.showchildren","page":"developer API","title":"Toolips.showchildren","text":"Internals\n\nshowchildren(x::Component) -> ::String\n\n\n\nGet the children of x as a markdown string.\n\nexample\n\nc = divider(\"example\")\nchild = p(\"mychild\")\npush!(c, child)\ns = showchildren(c)\nprintln(s)\n\"##### children\n|-- mychild\n\n\n\n\n\n","category":"function"},{"location":"extensions/toolips_memwrite/","page":"toolips memwrite","title":"toolips memwrite","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: white !important;}\nheader {background-color: white !important;}\ndiv {width: 100% important!;}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  padding: 20px;\n  width: 100% !important;\n  border-color: lightblue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: lime !important;\n}\np { color: gray !important;}\n  font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: black;}\n</style>\n<img src = \"../../assets/toolipsmemwrite.png\"></img>","category":"page"},{"location":"extensions/toolips_memwrite/","page":"toolips memwrite","title":"toolips memwrite","text":"Modules = [ToolipsMemWrite]","category":"page"},{"location":"old/interface/#components","page":"-","title":"components","text":"","category":"section"},{"location":"old/interface/","page":"-","title":"-","text":"A component is a Servable which contains markup information and can easily be translated into elements with properties..","category":"page"},{"location":"old/interface/","page":"-","title":"-","text":"Component","category":"page"},{"location":"old/interface/#Toolips.Component","page":"-","title":"Toolips.Component","text":"Component <: Servable\n\nname::String\nf::Function\ntag::String\nproperties::Dict\n\nA component is a standard servable which is used to represent HTML tag structures. Indexing a Component with a Symbol or a String will return or set a Component's property to that index. The two special indexes are :children and :text. :text will change the inner content of the Component and :children is where components that will be written inside the Component go. You can add to these with push!(c::Servable, c2::Servable)\n\nexample\n\nusing Toolips\n\nimage_style = Style(\"example\")\nimage_anim = Animation(\"img_anim\")\nimage_anim[:from] = \"opacity\" => \"0%\"\nimage_anim[:to] = \"opacity\" => \"100%\"\nanimate!(image_style)\n\nr = route(\"/\") do c::AbstractConnection\n    newimage = img(\"newimage\", src = \"/logo.png\")\n    style!(newimage, image_style)\n    write!(c, newimage)\nend\n\n\n\nfield info\n\nname::String - The name field is the way that a component is denoted in code.\nf::Function - The function that gets called with the Connection as an\n\nargument.\n\nproperties::Dict - A dictionary of symbols and values.\n\n\n\nconstructors\n\nComponent(name::String = \"\", tag::String = \"\", properties::Dict = Dict())\nComponent(name::String, tag::String, props::Base.Pairs)\n\n\n\n\n\n","category":"type"},{"location":"old/interface/","page":"-","title":"-","text":"Indexing a component will yield its .properties:","category":"page"},{"location":"old/interface/","page":"-","title":"-","text":"getindex(::Component, ::Symbol)\ngetindex(::Component, ::String)\nsetindex!(::Servable, ::Any, ::Symbol)\ngetindex(::Vector{Servable}, ::String)\nsetindex!(::Servable, ::Any, ::String)\ngetindex(::Servable, ::String)","category":"page"},{"location":"old/interface/#Base.getindex-Tuple{Component, Symbol}","page":"-","title":"Base.getindex","text":"Interface\n\ngetindex(s::Component, symb::Symbol) -> ::Any\n\n\n\nReturns a property value by symbol or name.\n\nexample\n\nc = p(\"hello\", text = \"Hello world\")\nc[:text]\n    \"Hello world!\"\n\nc[\"opacity\"] = \"50%\"\nc[\"opacity\"]\n    \"50%\"\n\n\n\n\n\n","category":"method"},{"location":"old/interface/#Base.getindex-Tuple{Component, String}","page":"-","title":"Base.getindex","text":"Interface\n\ngetindex(::Servable, ::String) -> ::Any\n\n\n\nReturns a property value by string or name.\n\nexample\n\nc = p(\"hello\", text = \"Hello world\")\nc[:text]\n    \"Hello world!\"\n\nc[\"opacity\"] = \"50%\"\nc[\"opacity\"]\n    \"50%\"\n\n\n\n\n\n","category":"method"},{"location":"old/interface/#Base.setindex!-Tuple{Servable, Any, Symbol}","page":"-","title":"Base.setindex!","text":"Interface\n\nsetindex!(s::Servable, a::Any, symb::Symbol) -> _\n\n\n\nSets the property represented by the symbol to the provided value.\n\nexample\n\nc = p(\"world\")\nc[:text] = \"hello world!\"\n\n\n\n\n\n","category":"method"},{"location":"old/interface/#Base.getindex-Tuple{Vector{Servable}, String}","page":"-","title":"Base.getindex","text":"Interface\n\ngetindex(c::VectorServable, str::String) -> ::Servable\n\n\n\nReturns the Servable (likely a Component) with the name str\n\nexample\n\ncomp1 = p(\"hello\")\ncomp2 = p(\"anotherp\")\ncs = components(comp1, comp2)\ncs[\"hello\"]\n    Component(\"hello\" ...)\n\n\n\n\n\n","category":"method"},{"location":"old/interface/#Base.setindex!-Tuple{Servable, Any, String}","page":"-","title":"Base.setindex!","text":"Interface\n\nsetindex!(s::Servable, a::Any, symb::String) -> _\n\n\n\nSets the property represented by the string to the provided value. Use the appropriate web-format, such as \"50%\" or \"50px\".\n\nexample\n\nc = p(\"world\")\nc[\"align\"] = \"center\"\n\n\n\n\n\n","category":"method"},{"location":"old/interface/#Base.getindex-Tuple{Servable, String}","page":"-","title":"Base.getindex","text":"Interface\n\ngetindex(::Servable, ::String) -> ::Any\n\n\n\nReturns a property value by string or name.\n\nexample\n\nc = p(\"hello\", text = \"Hello world\")\nc[:text]\n    \"Hello world!\"\n\nc[\"opacity\"] = \"50%\"\nc[\"opacity\"]\n    \"50%\"\n\n\n\n\n\n","category":"method"},{"location":"old/interface/","page":"-","title":"-","text":"There is a library of default components that comes with toolips. Generally, their name coincides with a docstring. All of these take an infinite number of key-word arguments. These arguments become the properties of a Servable.","category":"page"},{"location":"old/interface/","page":"-","title":"-","text":"img\nlink\nmeta\ninput\na\np\nh\nul\nli\ndivider\nbr\ni\ntitle\nspan\niframe\nsvg\nelement\nlabel\nscript\nnav\nbutton\nform\nToolips.footer\nbody\nheader\nsection","category":"page"},{"location":"old/interface/#Toolips.img","page":"-","title":"Toolips.img","text":"img(name::String; args ...) -> ::Component\n\n\n\nReturns the img Component with the key-word arguments provided in args as properties.\n\nexample\n\nimage = img(\"mylogo\", src = \"assets/logo.png\")\nwrite!(c, image)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.link","page":"-","title":"Toolips.link","text":"link(name::String; args ...) -> ::Component\n\n\n\nReturns the link Component with the key-word arguments provided in args as properties.\n\nexample\n\nmylink = link(\"mylink\", href = \"http://toolips.app\")\nwrite!(c, mylink)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.meta","page":"-","title":"Toolips.meta","text":"meta(name::String; args ...) -> ::Component\n\n\n\nReturns the meta Component with the key-word arguments provided in args as properties.\n\nexample\n\nmetainfo = meta(\"metainfo\", rel = \"meta-description\", text = \"hello\")\nwrite!(c, metainfo)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.input","page":"-","title":"Toolips.input","text":"input(name::String; args ...) -> ::Component\n\n\n\nReturns the input Component with the key-word arguments provided in args as properties.\n\nexample\n\nelement = input(\"mylogo\")\nwrite!(c, element)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.a","page":"-","title":"Toolips.a","text":"a(name::String; args ...) -> ::Component\n\n\n\nReturns the a Component with the key-word arguments provided in args as properties.\n\nexample\n\nelement = a(\"mylogo\")\nwrite!(c, element)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.p","page":"-","title":"Toolips.p","text":"p(name::String; args ...) -> ::Component\n\n\n\nReturns the p Component with the key-word arguments provided in args as properties.\n\nexample\n\np1 = input(\"mylogo\")\nwrite!(c, p)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.h","page":"-","title":"Toolips.h","text":"h(name::String; args ...) -> ::Component\n\n\n\nReturns the h Component with the key-word arguments provided in args as properties.\n\nexample\n\nh1 = h(\"heading1\", 1)\nwrite!(c, h1)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.ul","page":"-","title":"Toolips.ul","text":"ul(name::String; args ...) -> ::Component\n\n\n\nReturns the ul Component with the key-word arguments provided in args as properties.\n\nexample\n\nul1 = ul(\"mylogo\")\nwrite!(c, ul)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.li","page":"-","title":"Toolips.li","text":"li(name::String; args ...) -> ::Component\n\n\n\nReturns the li Component with the key-word arguments provided in args as properties.\n\nexample\n\nli1 = li(\"mylogo\")\nwrite!(c, li)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.divider","page":"-","title":"Toolips.divider","text":"divider(name::String; args ...) -> ::Component\n\n\n\nReturns the div Component with the key-word arguments provided in args as properties.\n\nexample\n\ndivider1 = divider(\"mylogo\")\nwrite!(c, divider)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.br","page":"-","title":"Toolips.br","text":"br(name::String; args ...) -> ::Component\n\n\n\nReturns the br Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = br(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.i","page":"-","title":"Toolips.i","text":"i(name::String; args ...) -> ::Component\n\n\n\nReturns the i Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = i(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.title","page":"-","title":"Toolips.title","text":"title(name::String; args ...) -> ::Component\n\n\n\nReturns the title Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = title(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.span","page":"-","title":"Toolips.span","text":"span(name::String; args ...) -> ::Component\n\n\n\nReturns the span Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = span(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.iframe","page":"-","title":"Toolips.iframe","text":"iframe(name::String; args ...) -> ::Component\n\n\n\nReturns the iframe Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = iframe(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.svg","page":"-","title":"Toolips.svg","text":"svg(name::String; args ...) -> ::Component\n\n\n\nReturns the svg Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = svg(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.element","page":"-","title":"Toolips.element","text":"element(name::String; args ...) -> ::Component\n\n\n\nReturns the element Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = element(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.label","page":"-","title":"Toolips.label","text":"label(name::String; args ...) -> ::Component\n\n\n\nReturns the label Component with the key-word arguments provided in args as properties.\n\nexample\n\nlbl = label(\"mylogo\", src = \"assets/logo.png\")\nwrite!(c, lbl)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.script","page":"-","title":"Toolips.script","text":"script(name::String; args ...) -> ::Component\n\n\n\nReturns the script Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = script(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.nav","page":"-","title":"Toolips.nav","text":"nav(name::String; args ...) -> ::Component\n\n\n\nReturns the nav Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = nav(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.button","page":"-","title":"Toolips.button","text":"button(name::String; args ...) -> ::Component\n\n\n\nReturns the button Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = button(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.form","page":"-","title":"Toolips.form","text":"form(name::String; args ...) -> ::Component\n\n\n\nReturns the form Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = form(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.footer","page":"-","title":"Toolips.footer","text":"footer(name::String; args ...) -> ::Component\n\n\n\nReturns the form Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = footer(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.body","page":"-","title":"Toolips.body","text":"body(name::String; args ...) -> ::Component\n\n\n\nReturns the form Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = body(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.header","page":"-","title":"Toolips.header","text":"header(name::String; args ...) -> ::Component\n\n\n\nReturns the form Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = header(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.section","page":"-","title":"Toolips.section","text":"section(name::String; args ...) -> ::Component\n\n\n\nReturns the form Component with the key-word arguments provided in args as properties.\n\nexample\n\ncomp = section(\"newcomp\")\nwrite!(c, comp)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/","page":"-","title":"-","text":"We can also compose components together using push!, and work with them using the following methods:","category":"page"},{"location":"old/interface/","page":"-","title":"-","text":"push!(::Component, ::Component ...)\nstyle!\ncomponents\nToolips.copy(::Component)\nToolips.has_children\nToolips.children\nToolips.getproperties\nToolips.properties!\ngetindex(::)","category":"page"},{"location":"old/interface/#Base.push!-Tuple{Component, Vararg{Component}}","page":"-","title":"Base.push!","text":"Interface\n\npush!(s::Component, d::Component ...) -> ::Component\n\n\n\nAdds the child or children d to s.properties[:children]\n\nexample\n\nc = Component()\notherc = Component()\npush!(c, otherc)\n\n\n\n\n\n","category":"method"},{"location":"old/interface/#Toolips.style!","page":"-","title":"Toolips.style!","text":"Interface\n\nstyle!(c::Servable, s::Style) -> _\n\n\n\nApplies the style to a servable.\n\nexample\n\nserv = p(\"wow\")\nmystyle = Style(\"mystyle\", color = \"lightblue\")\nstyle!(serv, mystyle)\n\n\n\n\n\nInterface\n\nstyle!(c::Servable, s::Pair ...) -> _\n\n\n\nApplies the style pairs to the servable's \"style\" property.\n\nexample\n\nmycomp = p(\"mycomp\")\nstyle!(mycomp, \"background-color\" => \"lightblue\", \"color\" => \"white\")\n\n\n\n\n\nInterface\n\nstyle!(c::Servable, s::Vector{Pair}) -> _\n\n\n\nApplies the style pairs to the servable's \"style\" property.\n\nexample\n\nmycomp = p(\"mycomp\")\nstyle!(mycomp, [\"background-color\" => \"lightblue\", \"color\" => \"white\"])\n\n\n\n\n\nInterface\n\nstyle!(::Style, ::Style) -> _\n\n\n\nCopies the properties from the second style into the first style.\n\nexample\n\nstyle1 = Style(\"firsts\")\nstyle2 = Style(\"seconds\")\nstyle1[\"color\"] = \"orange\"\nstyle!(style2, style1)\n\nstyle2[\"color\"]\n    \"orange\"\n\n\n\n\n\nSession Interface\n\nstyle!(cm::ComponentModifier, s::Servable, style::Style) -> _\n\n\n\nChanges the style class of s to the style p. Note – styles must be already written to the Connection prior.\n\nexample\n\n\n\n\n\n\n\nSession Interface\n\nstyle!(cm::ComponentModifier, name::String, sname::String) -> _\n\n\n\nChanges the style class of a Servable by name to the style p by name. Note – styles must be already written to the Connection prior.\n\nexample\n\n\n\n\n\n\n\nSession Interface\n\nstyle!(cm::ComponentModifier, s::Servable, p::Pair{String, String}) -> _\n\n\n\nStyles the Servable s with the properties and values in p.\n\nexample\n\n\n\n\n\n\n\nSession Interface\n\nstyle!(cm::ComponentModifier, s::Servable, p::Pair) -> _\n\n\n\nStyles the Servable s with the properties and values in p.\n\nexample\n\n\n\n\n\n\n\nSession Interface\n\nstyle!(cm::ComponentModifier, name::String, p::Pair) -> _\n\n\n\nStyles a Servable by name with the properties and values in p.\n\nexample\n\n\n\n\n\n\n\nSession Interface\n\nstyle!(cm::ComponentModifier, name::String, p::Vector{Pair{String, String}}) -> _\n\n\n\nStyles a Servable by name with the properties and values in p.\n\nexample\n\n\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.components","page":"-","title":"Toolips.components","text":"Interface\n\ncomponents(cs::Servable ...) -> ::Vector{Servable}\n\n\n\nCreates a Vector{Servable} from multiple servables. This is useful because a vector of components could potentially become a Vector{Component}, for example and this is not the dispatch that is used universally across the package.\n\nexample\n\nc = Component()\nc2 = Component()\ncomponents(c, c2)\n    Vector{Servable}(Component(), Component())\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.copy-Tuple{Component}","page":"-","title":"Toolips.copy","text":"Interface\n\ncopy(c::Component) -> ::Component\n\n\n\ncopies c.\n\nexample\n\nc = p(\"myp\")\nt = copy!(c)\n\n\n\n\n\n","category":"method"},{"location":"old/interface/#Toolips.has_children","page":"-","title":"Toolips.has_children","text":"Interface\n\nhas_children(c::Component) -> ::Bool\n\n\n\nReturns true if the given component has children.\n\nexample\n\nc = Component()\notherc = Component()\npush!(c, otherc)\n\nhas_children(c)\n    true\nhas_children(otherc)\n    false\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.children","page":"-","title":"Toolips.children","text":"Interface\n\nchildren(c::Component) -> ::Vector{Servable}\n\n\n\nReturns Vector{Servable} of children inside of c.\n\nexample\n\nchildren(c)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.getproperties","page":"-","title":"Toolips.getproperties","text":"Interface\n\ngetproperties(c::Component) -> ::Dict\n\n\n\nReturns a Dict of properties inside of c.\n\nexample\n\nprops = properties(c)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.properties!","page":"-","title":"Toolips.properties!","text":"Interface\n\nproperties!(c::Servable, s::Servable) -> _\n\n\n\nCopies properties from s,properties into c.properties.\n\nexample\n\ncomp = Component()\nothercomp = Component()\nothercomp[\"opacity\"] = \"100%\"\nproperties!(comp, othercomp)\n\ncomp[\"opacity\"]\n        100%\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#style-components","page":"-","title":"style components","text":"","category":"section"},{"location":"old/interface/","page":"-","title":"-","text":"Style components change the style of a Component","category":"page"},{"location":"old/interface/","page":"-","title":"-","text":"StyleComponent","category":"page"},{"location":"old/interface/#Toolips.StyleComponent","page":"-","title":"Toolips.StyleComponent","text":"abstract type StyleComponent <: Servable\n\nNo different from a normal Servable, simply an abstract type step for the interface to separate working with Animations and Styles.\n\nServable Consistencies\n\nServables can be written to a Connection via thier f() function and the\ninterface. They can also be indexed with strings or symbols to change properties\n##### Consistencies\n- f::Function - Function whose output to be written to http. Must take a single\npositonal argument of type ::Connection or ::AbstractConnection\n\n\n\n\n\n","category":"type"},{"location":"old/interface/","page":"-","title":"-","text":"The main style components are Animations and Styles.","category":"page"},{"location":"old/interface/","page":"-","title":"-","text":"Toolips.Style\n(:)(::Style, ::String, ::Pair ...)","category":"page"},{"location":"old/interface/#Toolips.Style","page":"-","title":"Toolips.Style","text":"Style\n\nname::String\nf::Function\nproperties::Dict{Any, Any}\nextras::Vector{Servable}\n\nCreates a style from attributes, can style a Component using the style! method. Names should be consistent with CSS names. For example, a default h1 style would be named \"h1\". A heading style for a specific class should be \"h1.myheading\"\n\nexample\n\nstyle = Style(\"p.mystyle\", color = \"blue\")\nstyle[\"opacity\"] = \"50%\"\ncomp = Component()\nstyle!(comp, style)\n\n\n\nfield info\n\nname::String - The name of the style. Should be consistent with CSS naming.\nf::Function - The function f, called by write! when writing to a Connection.\nproperties::Dict{Any, Any} - A dict of style attributes.\nextras::String - Extra components to be written along with the style. Usually\n\nthis is an animation.\n\nconstructors\n\nStyle(name::String; props ...)\n\n\n\n\n\n","category":"type"},{"location":"old/interface/","page":"-","title":"-","text":"Animation\nanimate!\ndelete_keyframe!","category":"page"},{"location":"old/interface/#Toolips.Animation","page":"-","title":"Toolips.Animation","text":"Animation\n\nname::String\nkeyframes::Dict\nf::Function\ndelay::Float64\nlength::Float64\niterations::Integer\n\nAn animation can be used to animate Styles with the animate! method. Animating is done by indexing by either percentage, or symbols, such as from and to.\n\nexample\n\nanim = Animation(\"myanim\")\nanim[:from] = \"opacity\" => \"0%\"\nanim[:to] = \"opacity\" => \"100%\"\nstyle = Style(\"example\")\nanimate!(style, anim)\n\n\n\nfield info\n\nname::String - The name of the animation.\nkeyframes::Dict - The keyframes that have been pushed so far.\nf::Function - The function called when writing to a Connection.\ndelay::Float64 - The delay before the animation begins.\nlength::Float64 - The amount of time the animation should play.\niterations::Integer - The number of times the animation should repeat. When\n\nset to 0 the animation will loop indefinitely.\n\nconstructors\n\nAnimation(name::String = \"animation\", delay::Float64 = 0.0,         length::Float64 = 5.2, iterations::Integer = 1)\n\n\n\n\n\n","category":"type"},{"location":"old/interface/#Toolips.animate!","page":"-","title":"Toolips.animate!","text":"Interface\n\nanimate!(s::Style, a::Animation) -> _\n\n\n\nSets the Animation as a property of the style.\n\nexample\n\nanim = Animation(\"fade_in\")\nanim[:from] = \"opacity\" => \"0%\"\nanim[:to] = \"opacity\" => \"100%\"\n\nanimated_style = Style(\"example\")\nanimate!(animated_style, anim)\n\n\n\n\n\nInterface\n\nanimate!(s::Component, a::Animation) -> _\n\n\n\nSets the animation of a Component directly\n\nexample\n\nanim = Animation(\"fade_in\")\nanim[:from] = \"opacity\" => \"0%\"\nanim[:to] = \"opacity\" => \"100%\"\n\nmyp = p(\"myp\", text = \"I fade in!\")\nanimate!(myp, anim)\n\n\n\n\n\nSession Interface\n\nanimate!(cm::ComponentModifier, s::Servable, a::Animation; play::Bool) -> _\n\n\n\nUpdates the servable s's animation with the animation a.\n\nexample\n\ns = divider(\"mydiv\")\na = Animation(\"fade\")\na[:from] = \"opacity\" => \"0%\"\na[:to] = \"opacity\" => \"100%\"\n# where c is the Connection.\non(c, s, \"click\") do cm::ComponentModifier\n    animate!(cm, s, a)\nend\n\n\n\n\n\nSession Interface\n\nanimate!(cm::ComponentModifier, s::String, a::Animation; play::Bool) -> _\n\n\n\nUpdates the servable with name s's animation with the animation a.\n\nexample\n\n``` s = divider(\"mydiv\") a = Animation(\"fade\") a[:from] = \"opacity\" => \"0%\" a[:to] = \"opacity\" => \"100%\"\n\nwhere c is the Connection.\n\non(c, s, \"click\") do cm::ComponentModifier     animate!(cm, s, a) end      ```\n\n\n\n\n\n","category":"function"},{"location":"old/interface/#Toolips.delete_keyframe!","page":"-","title":"Toolips.delete_keyframe!","text":"Interface\n\ndelete_keyframe!(a::Animation, key::Int64) -> _\n\n\n\nDeletes a given keyframe from an animation by keyframe percentage.\n\nexample\n\nanim = Animation(\"\")\nanim[0] = \"opacity\" => \"0%\"\ndelete_keyframe!(anim, 0)\n\n\n\n\n\nInterface\n\ndelete_keyframe!(a::Animation, key::Symbol) -> _\n\n\n\nDeletes a given keyframe from an animation by keyframe name.\n\nexample\n\nanim = Animation(\"\")\nanim[:to] = \"opacity\" => \"0%\"\ndelete_keyframe!(anim, :to)\n\n\n\n\n\n","category":"function"},{"location":"old/interface/","page":"-","title":"-","text":"Animating and property adjustment is done with indexing.","category":"page"},{"location":"old/interface/","page":"-","title":"-","text":"setindex!(::Animation, ::Pair, ::Symbol)\nsetindex!(::Animation, ::Pair, ::Int64)","category":"page"},{"location":"old/interface/#Base.setindex!-Tuple{Animation, Pair, Symbol}","page":"-","title":"Base.setindex!","text":"Interface\n\nsetindex!(anim::Animation, set::Pair, n::Symbol) -> _\n\n\n\nSets the animation at the corresponding key-word's position. Usually these are :to and :from.\n\nexample\n\na = Animation(\"world\")\na[:to] = \"opacity\" => \"0%\"\n\n\n\n\n\n","category":"method"},{"location":"old/interface/#Base.setindex!-Tuple{Animation, Pair, Int64}","page":"-","title":"Base.setindex!","text":"Interface\n\nsetindex!(anim::Animation, set::Pair, n::Int64) -> _\n\n\n\nSets the animation at the percentage of the Int64 to modify the properties of pair.\n\nexample\n\na = Animation(\"world\")\na[0] = \"opacity\" => \"0%\"\n\n\n\n\n\n","category":"method"},{"location":"old/interface/#other-servables","page":"-","title":"other servables","text":"","category":"section"},{"location":"old/interface/","page":"-","title":"-","text":"The file Servable, as you might expect, serves a file via a directory.","category":"page"},{"location":"old/interface/","page":"-","title":"-","text":"File","category":"page"},{"location":"old/interface/#Toolips.File","page":"-","title":"Toolips.File","text":"File <: Servable\n\ndir::String f::Function Serves a file into a Connection.\n\nexample\n\nf = File(\"hello.txt\")\nr = route(\"/\") do c\n    write!(c, f)\nend\n\n\n\nfield info\n\ndir::String - The directory of a file to serve.\nf::Function - Function whose output to be written to http().\n\n\n\nconstructors\n\nFile(dir::String)\n\n\n\n\n\n","category":"type"},{"location":"old/interface/","page":"-","title":"-","text":"Servables are also incredibly easy to write, and part of the beauty of toolips is just how easy it is to create these kinds of extensions in toolips!","category":"page"},{"location":"","page":"toolips?","title":"toolips?","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: #FDF8FF !important;}\nheader {background-color: #FDF8FF !important}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\n\np {font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: #565656;}\nbutton {border-radius: 5px; padding: 7px; background-color: lightblue;\ncolor: white; font-size: 16pt; font-weight: bold; border-style: none; cursor: pointer; margin: 5px;}\nbutton:hover {background-color: orange;}\n</style>\n<div align = \"center\">\n<img align = \"center\" width = 300 src = \"assets/toolips.svg\"></img></br></br></br>\n<a href = \"https://toolips.app\"><button>home</button></a>\n<a href = \"https://github.com/ChifiSource/Toolips.jl\"><button>github</button></a>\n<h4 align = \"center\">a manic web-development framework</h4>\n</div>","category":"page"},{"location":"","page":"toolips?","title":"toolips?","text":"Toolips.jl is a fast, asynchronous, low-memory, full-stack, and reactive web-development framework always written in pure Julia. Here is Toolips.jl in a nutshell:","category":"page"},{"location":"","page":"toolips?","title":"toolips?","text":"Fast and secure. All routes are served through Julia, and anything that can be written must be written using a method that can only write very specific types.\nHTTPS capable, load balancer friendly. Can easily be deployed with SSL.\nExtendable servers, components, and methods, they are all extendable!\nModular applications. Toolips applications are regular Julia modules.\nRegular Julia projects.\nDeclarative, high-level syntax.\nExtremely low memory usage.\nAsynchronous. Run multiple functions at the same time as you serve to each incoming request.\nVersatile. Toolips.jl can be used for all scenarios, from full-stack web-development to APIs.","category":"page"},{"location":"","page":"toolips?","title":"toolips?","text":"using Pkg; Pkg.add(\"Toolips\")","category":"page"},{"location":"","page":"toolips?","title":"toolips?","text":"julia> # Press ] to enter your Pkg REPL\njulia> ]\npkg> add Toolips","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Poppins&family=Roboto+Mono:wght@100&family=Rubik:wght@500&display=swap\" rel=\"stylesheet\">\n\n<style>\nbody {background-color: #FDF8FF !important;}\nheader {background-color: #FDF8FF !important}\nh1 {\n  font-family: 'Poppins', sans-serif !important;\n  font-family: 'Roboto Mono', monospace !important;\n  font-family: 'Rubik', sans-serif !important;}\n\n  h2 {\n    font-family: 'Poppins', sans-serif !important;\n    font-family: 'Roboto Mono', monospace !important;\n    font-family: 'Rubik', sans-serif !important;}\n    h4 { color: #03045e !important;\n      font-family: 'Poppins', sans-serif !important;\n      font-family: 'Roboto Mono', monospace !important;\n      font-family: 'Rubik', sans-serif !important;}\narticle {\n  border-radius: 30px !important;\n  border-color: lightblue !important;\n}\npre {\n  border-radius: 10px !important;\n  border-color: #FFE5B4 !important;\n}\np {font-family: 'Poppins', sans-serif;\nfont-family: 'Roboto Mono', monospace;\nfont-family: 'Rubik', sans-serif; color: #565656;}\n</style>","category":"page"},{"location":"routing/#routing","page":"routing","title":"routing","text":"","category":"section"},{"location":"routing/","page":"routing","title":"routing","text":"Toolips Routes are structures that contain both a Function and a String. The String represents the URL from root that we wish to serve the Function at. The Function takes a single positional argument. The argument can be any sort of AbstractConnection, unless specified otherwise by your ServerTemplate, this will be of type Connection.","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"Toolips.Route","category":"page"},{"location":"routing/#Toolips.Route","page":"routing","title":"Toolips.Route","text":"Route\n\npath::String\npage::Function -\n\nA route is added to a ServerTemplate using either its constructor, or the ServerTemplate.add(::Route) method. Each route calls a function. The Route type is commonly constructed using the do syntax with the route(::Function, ::String) method.\n\nexample\n\n# Constructors\nroute = Route(\"/\", p(text = \"hello\"))\n\nfunction example(c::Connection)\n    write!(c, \"hello\")\nend\n\nroute = Route(\"/\", example)\n\n# method\nroute = route(\"/\") do c\n    write!(c, \"Hello world!\")\n    write!(c, p(text = \"hello\"))\n    # we can also use extensions!\n    c[:logger].log(\"hello world!\")\nend\n\n\n\nfield info\n\npath::String - The path to route to the function, e.g. \"/\".\npage::Function - The function to route the path to.\n\n\n\nconstructors\n\nRoute(path::String, f::Function)\n\n\n\n\n\n","category":"type"},{"location":"routing/","page":"routing","title":"routing","text":"You can create a new route by either writing a function, or using the route method. When using the latter approach, writing a function, it is important to remember that you will still need to call the route method after. Route functions and strings can be provided in any order to the route method.","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"using Toolips\n\nfunction myroutef(c::Connection)\n  write!(c, \"hello!\")\nend\n\nmyroute = route(\"/\", myroutef)\notherroute = route(\"/otherroute\") do c::Connection\n  write!(c, \"goodbye!\")\nend","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"Toolips.route","category":"page"},{"location":"routing/#Toolips.route","page":"routing","title":"Toolips.route","text":"Interface\n\nroute(f::Function, r::String) -> ::Route\n\n\n\nCreates a route from the Function. The function should take a Connection or AbstractConnection as a single positional argument.\n\nexample\n\nroute(\"/\") do c::Connection\n\nend\n\n\n\n\n\nInterface\n\nroute(r::String, f::Function) -> ::Route\n\n\n\nCreates a route from the Function. The function should take a Connection or AbstractConnection as a single positional argument.\n\nexample\n\nfunction example(c::Connection)\n    write!(c, h(\"myh\", 1, text = \"hello!\"))\nend\nr = route(\"/\", example)\n\n\n\n\n\n","category":"function"},{"location":"routing/#composing-routes","page":"routing","title":"composing routes","text":"","category":"section"},{"location":"routing/","page":"routing","title":"routing","text":"Routes can be composed into a Vector{Route} using the routes method. The ServerTemplate type, which utilizes our routes, will only take a Vector{Route}, so it is important that we compose routes using either the routes method, or by calling the Vector{Route} constructor.","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"using Toolips\n\nfunction myroutef(c::Connection)\n  write!(c, \"hello!\")\nend\n\nmyroute = route(\"/\", myroutef)\notherroute = route(\"/otherroute\") do c::Connection\n  write!(c, \"goodbye!\")\nend\n\nmyroutes = Vector{Route}(myroute, otherroute)\nmyroutes = routes(myroute, otherroute)","category":"page"},{"location":"routing/#serving-routes","page":"routing","title":"serving routes","text":"","category":"section"},{"location":"routing/","page":"routing","title":"routing","text":"Routes are served by the ServerTemplate type. We can either provide routes to the constructor, or add them individually with ServerTemplate.add.","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"using Toolips\n\nfunction myroutef(c::Connection)\n  write!(c, \"hello!\")\nend\n\nmyroute = route(\"/\", myroutef)\notherroute = route(\"/otherroute\") do c::Connection\n  write!(c, \"goodbye!\")\nend\n\nmyroutes = routes(myroute)\n\nst = ServerTemplate(\"127.0.0.1\", 8000, myroutes)\nst.add(otherroute)","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"We can then begin the serving of these routes with ServerTemplate.start:","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"st.start()","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"Routes can also be removed using the unroute! method.","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"st = ServerTemplate(\"127.0.0.1\", 8000, myroutes)\nst.add(otherroute)\nst.remove(\"/otherroute\")","category":"page"},{"location":"routing/#changing-routes","page":"routing","title":"changing routes","text":"","category":"section"},{"location":"routing/","page":"routing","title":"routing","text":"Routes can also be modified via the command-line interface while the WebServer is running. This can be done both inside of a route on a Connection, as well as inside of a Julia REPL on a WebServer","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"using Toolips\n\nfunction myroutef(c::Connection)\n  # Change the route via setindex!:\n  c[\"/\"] = otherroute\n  # Change the route via route!:\n  route!(c, \"/\") do c::Connection\n    write!(c, \"goodbye!\")\n  end\n  route!(c, otherroute)\nend\n\nfunction otherroute(c::Connection)\n  write!(c, \"goodbye!\")\nend\n\nmyroute = route(\"/\", myroutef)\nmyroutes = routes(myroute)\n\nst = ServerTemplate(\"127.0.0.1\", 8000, myroutes)","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"We can also remove a route using the unroute! method:","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"function myroutef(c::Connection)\n  # Change the route via setindex!:\n  c[\"/\"] = otherroute\n  # Change the route via route!:\n  route!(c, \"/\") do c::Connection\n    write!(c, \"goodbye!\")\n  end\nend","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"The same technique can also be applied to a WebServer.","category":"page"},{"location":"routing/","page":"routing","title":"routing","text":"using Toolips\n\nst = ServerTemplate(\"127.0.0.1\", 8000, myroutes)\nwebserver = st.start()\n\nroute!(webserver, \"/\") do c::Connection\n  write!(c, \"I am a rerouted route!\")\nend","category":"page"}]
}
